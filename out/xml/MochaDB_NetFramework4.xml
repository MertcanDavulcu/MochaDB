<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MochaDB</name>
    </assembly>
    <members>
        <member name="T:MochaDB.Connection.MochaProvider">
            <summary>
            Provider for MochaDB connections.
            </summary>
        </member>
        <member name="M:MochaDB.Connection.MochaProvider.#ctor(System.String)">
            <summary>
            Create new MochaProvider.
            </summary>
            <param name="connectionString">Connection string for connect to MochaDb database.</param>
        </member>
        <member name="M:MochaDB.Connection.MochaProvider.GetAttribute(System.String,System.String)">
            <summary>
            Return attribute by name.
            </summary>
            <param name="name">Name of attribute.</param>
            <param name="connectionString">Connection string for connect to MochaDb database.</param>
        </member>
        <member name="M:MochaDB.Connection.MochaProvider.GetConnectionString(System.Collections.Generic.IEnumerable{MochaDB.Connection.MochaProviderAttribute})">
            <summary>
            Return connection string by attributes.
            </summary>
            <param name="attributes">Attribtutes of connection string.</param>
        </member>
        <member name="M:MochaDB.Connection.MochaProvider.EnableConstant">
            <summary>
            Enable constant property of provider. It cannot be undone!
            </summary>
        </member>
        <member name="M:MochaDB.Connection.MochaProvider.GetAttribute(System.String)">
            <summary>
            Returns attribute by name.
            </summary>
            <param name="name">Name of attribute.</param>
        </member>
        <member name="M:MochaDB.Connection.MochaProvider.GetBoolAttributeState(System.String)">
            <summary>
            Returns boolean provider attribute value by name.
            </summary>
            <param name="name">Name of attribute.</param>
        </member>
        <member name="M:MochaDB.Connection.MochaProvider.ToString">
            <summary>
            Returns <see cref="P:MochaDB.Connection.MochaProvider.ConnectionString"/>.
            </summary>
        </member>
        <member name="P:MochaDB.Connection.MochaProvider.ConnectionString">
            <summary>
            Connection string of provider.
            </summary>
        </member>
        <member name="P:MochaDB.Connection.MochaProvider.Path">
            <summary>
            Path of database.
            </summary>
        </member>
        <member name="P:MochaDB.Connection.MochaProvider.Password">
            <summary>
            Password of database.
            </summary>
        </member>
        <member name="P:MochaDB.Connection.MochaProvider.Readonly">
            <summary>
            Readonly state of connection.
            </summary>
        </member>
        <member name="P:MochaDB.Connection.MochaProvider.Constant">
            <summary>
            Is readonly provider.
            </summary>
        </member>
        <member name="T:MochaDB.Connection.MochaConnectionState">
            <summary>
            Connection states for MochaDB.
            </summary>
        </member>
        <member name="F:MochaDB.Connection.MochaConnectionState.Connected">
            <summary>
            Connected to database.
            </summary>
        </member>
        <member name="F:MochaDB.Connection.MochaConnectionState.Disconnected">
            <summary>
            Disconnected from database.
            </summary>
        </member>
        <member name="T:MochaDB.Connection.MochaProviderAttribute">
            <summary>
            Attributes for MochaProviders.
            </summary>
        </member>
        <member name="M:MochaDB.Connection.MochaProviderAttribute.#ctor">
            <summary>
            Create new MochaProviderAttribute.
            </summary>
        </member>
        <member name="M:MochaDB.Connection.MochaProviderAttribute.#ctor(System.String,System.String)">
            <summary>
            Create new MochaProviderAttribute.
            </summary>
            <param name="name">Name of attribute.</param>
            <param name="value">Value of attribute.</param>
        </member>
        <member name="E:MochaDB.Connection.MochaProviderAttribute.NameChanged">
            <summary>
            This happens after name changed.
            </summary>
        </member>
        <member name="E:MochaDB.Connection.MochaProviderAttribute.ValueChanged">
            <summary>
            This happens after value changed.
            </summary>
        </member>
        <member name="M:MochaDB.Connection.MochaProviderAttribute.CheckValue">
            <summary>
            Check value by name.
            </summary>
        </member>
        <member name="M:MochaDB.Connection.MochaProviderAttribute.GetProviderString">
            <summary>
            Returns string as in provider.
            </summary>
        </member>
        <member name="M:MochaDB.Connection.MochaProviderAttribute.ToString">
            <summary>
            Returns result of <see cref="M:MochaDB.Connection.MochaProviderAttribute.GetProviderString"/>.
            </summary>
        </member>
        <member name="P:MochaDB.Connection.MochaProviderAttribute.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:MochaDB.Connection.MochaProviderAttribute.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:MochaDB.Data.Types.Bit">
            <summary>
            Bit data type of MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.Data.Types.Bit.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="value">Value.</param>
        </member>
        <!-- Kötü biçimli XML yorumu "M:MochaDB.Data.Types.Bit.Parse(System.Boolean)" üyesi için yoksayıldı -->
        <!-- Kötü biçimli XML yorumu "M:MochaDB.Data.Types.Bit.Parse(System.Int32)" üyesi için yoksayıldı -->
        <!-- Kötü biçimli XML yorumu "M:MochaDB.Data.Types.Bit.Parse(System.Double)" üyesi için yoksayıldı -->
        <!-- Kötü biçimli XML yorumu "M:MochaDB.Data.Types.Bit.Parse(System.String)" üyesi için yoksayıldı -->
        <!-- Kötü biçimli XML yorumu "M:MochaDB.Data.Types.Bit.TryParse(System.Int32,MochaDB.Data.Types.Bit@)" üyesi için yoksayıldı -->
        <!-- Kötü biçimli XML yorumu "M:MochaDB.Data.Types.Bit.TryParse(System.Single,MochaDB.Data.Types.Bit@)" üyesi için yoksayıldı -->
        <!-- Kötü biçimli XML yorumu "M:MochaDB.Data.Types.Bit.TryParse(System.String,MochaDB.Data.Types.Bit@)" üyesi için yoksayıldı -->
        <member name="M:MochaDB.Data.Types.Bit.ToString">
            <summary>
            Returns value as string.
            </summary>
        </member>
        <member name="T:MochaDB.IMochaCollection`1">
            <summary>
            Collection interface for MochaDB.
            </summary>
            <typeparam name="T">Item type of collector.</typeparam>
        </member>
        <member name="T:MochaDB.IMochaReadonlyCollection`1">
            <summary>
            Readonly collection interface for MochaDB.
            </summary>
            <typeparam name="T">Item type of collector.</typeparam>
        </member>
        <member name="T:MochaDB.Logging.MochaLog">
            <summary>
            Log for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.Logging.MochaLog.#ctor(System.String)">
            <summary>
            Create a new MochaLog.
            </summary>
            <param name="log">Log content.</param>
        </member>
        <member name="M:MochaDB.Logging.MochaLog.#ctor(System.String,System.DateTime)">
            <summary>
            Create a new MochaLog.
            </summary>
            <param name="log">Log content.</param>
            <param name="time">Log time.</param>
        </member>
        <member name="M:MochaDB.Logging.MochaLog.TakeID">
            <summary>
            Take a new MochaID by default algorithm.
            </summary>
        </member>
        <member name="M:MochaDB.Logging.MochaLog.ToString">
            <summary>
            Returns <see cref="P:MochaDB.Logging.MochaLog.Log"/>.
            </summary>
        </member>
        <member name="P:MochaDB.Logging.MochaLog.ID">
            <summary>
            ID of log.
            </summary>
        </member>
        <member name="P:MochaDB.Logging.MochaLog.Log">
            <summary>
            Log content.
            </summary>
        </member>
        <member name="P:MochaDB.Logging.MochaLog.Time">
            <summary>
            Log time.
            </summary>
        </member>
        <member name="T:MochaDB.Mhql.MhqlFormatter">
            <summary>
            Formatter for Mhql commands.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MhqlFormatter.IsObject(System.String)">
            <summary>
            Returns true if value is Mhql keyword or function but return false if not.
            </summary>
            <param name="value">Value to check.</param>
        </member>
        <member name="M:MochaDB.Mhql.MhqlFormatter.UpperCaseObjects(System.String@)">
            <summary>
            Replace Mhql keywords and functions to upper case.
            </summary>
            <param name="value">The value to targeting.</param>
        </member>
        <member name="M:MochaDB.Mhql.MhqlFormatter.UpperCaseObjects(System.String)">
            <summary>
            Replace Mhql keywords and functions to upper case.
            </summary>
            <param name="value">The value to targeting.</param>
        </member>
        <member name="M:MochaDB.Mhql.MhqlFormatter.LowerCaseObjects(System.String@)">
            <summary>
            Replace Mhql keywords and functions to lower case.
            </summary>
            <param name="value">The value to targeting.</param>
        </member>
        <member name="M:MochaDB.Mhql.MhqlFormatter.LowerCaseObjects(System.String)">
            <summary>
            Replace Mhql keywords and functions to lower case.
            </summary>
            <param name="value">The value to targeting.</param>
        </member>
        <member name="T:MochaDB.Mhql.MochaDbCommand">
            <summary>
            MHQL Command processor for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create a new MochaDbCommand.
            </summary>
            <param name="db">Target MochaDatabase.</param>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.#ctor(System.String,MochaDB.MochaDatabase)">
            <summary>
            Create a new MochaDbCommand.
            </summary>
            <param name="command">MQL Command.</param>
            <param name="db">Target MochaDatabase.</param>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.CheckConnection">
            <summary>
            Check connection and database.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.ExecuteScalarTable">
            <summary>
            Returns first data as MochaTableResult.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.ExecuteScalarTable(System.String)">
            <summary>
            Returns first data as MochaTableResult.
            </summary>
            <param name="command">MHQL Command to set.</param>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.ExecuteScalar(System.String)">
            <summary>
            Returns first result or null.
            </summary>
            <param name="command">MQL Command to set.</param>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.ExecuteScalar">
            <summary>
            Returns first result or null.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.ExecuteReader(System.String)">
            <summary>
            Read returned results.
            </summary>
            <param name="command">MQL Command to set.</param>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.ExecuteReader">
            <summary>
            Read returned results.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaDbCommand.ToString">
            <summary>
            Returns command.
            </summary>
        </member>
        <member name="P:MochaDB.Mhql.MochaDbCommand.Command">
            <summary>
            Current MQL command.
            </summary>
        </member>
        <member name="P:MochaDB.Mhql.MochaDbCommand.Database">
            <summary>
            Target database.
            </summary>
        </member>
        <member name="T:MochaDB.Mhql.MochaTableResult">
            <summary>
            Table result for Mhql query results.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaTableResult.#ctor">
            <summary>
            Create a new MochaTableResult.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaTableResult.SetRowsByDatas">
            <summary>
            Set rows by datas of columns.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaTableResult.SetDatasByRows">
            <summary>
            Set datas by row datas.
            </summary>
        </member>
        <member name="M:MochaDB.Mhql.MochaTableResult.IsEmpty">
            <summary>
            Returns table empty state.
            </summary>
        </member>
        <member name="P:MochaDB.Mhql.MochaTableResult.Columns">
            <summary>
            Columns.
            </summary>
        </member>
        <member name="P:MochaDB.Mhql.MochaTableResult.Rows">
            <summary>
            Rows.
            </summary>
        </member>
        <member name="T:MochaDB.MochaArray`1">
            <summary>
            Static array for MochaDB.
            </summary>
            <typeparam name="T">Type of items.</typeparam>
        </member>
        <member name="M:MochaDB.MochaArray`1.#ctor(System.Int32)">
            <summary>
            Create a new MochaArray.
            </summary>
            <param name="capacity">Capacity of items.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.#ctor(`0[])">
            <summary>
            Create a new MochaArray.
            </summary>
            <param name="item">Items of array.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new MochaArray.
            </summary>
            <param name="item">Items of array.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.Select(System.Func{`0,`0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.Select(System.Func{`0,System.Int32,`0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.Where(System.Func{`0,System.Int32,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.OrderByDescending(System.Func{`0,`0})">
            <summary>
            Order items descending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.OrderBy(System.Func{`0,`0})">
            <summary>
            Order items ascending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.GroupBy(System.Func{`0,`0})">
            <summary>
            Group items by query.
            </summary>
            <param name="query">Query to use in grouping.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.IndexOf(`0)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="item">Item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.Contains(`0)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="item">Item to exists check.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.MaxIndex">
            <summary>
            Return max index of item count.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.IsEmptyCollection">
            <summary>
            Return true if is empty collection but return false if not.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.ElementAt(System.Int32)">
            <summary>
            Return element by index.
            </summary>
            <param name="index">Index of element.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.SetElement(System.Int32,`0)">
            <summary>
            Set element by index.
            </summary>
            <param name="index">Index of element.</param>
            <param name="item">Item to set.</param>
        </member>
        <member name="M:MochaDB.MochaArray`1.Clone">
            <summary>
            Create and return copy this collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.ArrayClone">
            <summary>
            Create and return static array from collection.
            </summary>
        </member>
        <!-- Kötü biçimli XML yorumu "M:MochaDB.MochaArray`1.ToList" üyesi için yoksayıldı -->
        <member name="M:MochaDB.MochaArray`1.ToReader">
            <summary>
            Returns values in MochaReader.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.GetFirst">
            <summary>
            Return first element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.GetLast">
            <summary>
            Return last element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="M:MochaDB.MochaArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy items to array by start index.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Index to start copying.</param>
        </member>
        <member name="P:MochaDB.MochaArray`1.Length">
            <summary>
            Count of item.
            </summary>
        </member>
        <member name="P:MochaDB.MochaArray`1.Item(System.Int32)">
            <summary>
            Returns or set item by index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="T:MochaDB.MochaAttribute">
            <summary>
            Attribute for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaAttribute.#ctor(System.String)">
            <summary>
            Create new MochaAttribute.
            </summary>
            <param name="name">Name of attribute.</param>
        </member>
        <member name="M:MochaDB.MochaAttribute.#ctor(System.String,System.String)">
            <summary>
            Create new MochaAttribute.
            </summary>
            <param name="name">Name of attribute.</param>
            <param name="value">Value of attribute.</param>
        </member>
        <member name="E:MochaDB.MochaAttribute.NameChanged">
            <summary>
            This happens after name changed.
            </summary>
        </member>
        <member name="E:MochaDB.MochaAttribute.ValueChanged">
            <summary>
            This happens after value changed.
            </summary>
        </member>
        <member name="M:MochaDB.MochaAttribute.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaAttribute.Value"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaAttribute.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:MochaDB.MochaAttribute.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:MochaDB.MochaCollection`1">
            <summary>
            Base class for MochaDB collections.
            </summary>    
            <typeparam name="T">Item type.</typeparam>
        </member>
        <member name="E:MochaDB.MochaCollection`1.Changed">
            <summary>
            This happens after collection changed.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.Clear">
            <summary>
            Remove all items.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.Add(`0)">
            <summary>
            Add item.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add item from range.
            </summary>
            <param name="items">Range to add items.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.Remove(`0)">
            <summary>
            Remove item.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.RemoveAt(System.Int32)">
            <summary>
            Remove item by index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.GetFirst">
            <summary>
            Return first element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.GetLast">
            <summary>
            Return last element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.IndexOf(`0)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="item">Item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.Contains(`0)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="item">Item to exists check.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.MaxIndex">
            <summary>
            Return max index of item count.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.IsEmptyCollection">
            <summary>
            Return true if is empty collection but return false if not.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.ElementAt(System.Int32)">
            <summary>
            Return element by index.
            </summary>
            <param name="index">Index of element.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.ToArray">
            <summary>
            Create and return static array from collection.
            </summary>
        </member>
        <!-- Kötü biçimli XML yorumu "M:MochaDB.MochaCollection`1.ToList" üyesi için yoksayıldı -->
        <member name="M:MochaDB.MochaCollection`1.ToReader">
            <summary>
            Returns values in MochaReader.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy items to array by start index.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Index to start copying.</param>
        </member>
        <member name="M:MochaDB.MochaCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="M:MochaDB.MochaCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="P:MochaDB.MochaCollection`1.Item(System.Int32)">
            <summary>
            Return item by index.
            </summary>
            <param name="index">Index of item.</param>
        </member>
        <member name="P:MochaDB.MochaCollection`1.Count">
            <summary>
            Count of items.
            </summary>
        </member>
        <member name="P:MochaDB.MochaCollection`1.IsReadOnly">
            <summary>
            Is Readonly collection.
            </summary>
        </member>
        <member name="T:MochaDB.MochaColumn">
            <summary>
            This is column object for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumn.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumn.#ctor(System.String)">
            <summary>
            Create new MochaColumn.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:MochaDB.MochaColumn.#ctor(System.String,MochaDB.MochaDataType)">
            <summary>
            Create new MochaColumn.
            </summary>
            <param name="name">Name of column.</param>
            <param name="dataType">Data type of column.</param>
        </member>
        <member name="M:MochaDB.MochaColumn.#ctor(System.String,MochaDB.MochaDataType,System.Collections.Generic.IEnumerable{MochaDB.MochaData})">
            <summary>
            Create new MochaColumn.
            </summary>
            <param name="name">Name of column.</param>
            <param name="dataType">Data type of column.</param>
        </member>
        <member name="E:MochaDB.MochaColumn.NameChanged">
            <summary>
            This happens after name changed;
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumn.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaColumn.Name"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumn.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumn.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumn.Datas">
            <summary>
            Datas of column.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumn.DataType">
            <summary>
            Data type of datas.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumn.Tag">
            <summary>
            Tag.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumn.MHQLAsText">
            <summary>
            Text of MHQL AS keyword.
            </summary>
        </member>
        <member name="T:MochaDB.MochaColumnCollection">
            <summary>
            MochaColumn collector.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.#ctor">
            <summary>
            Create new MochaColumnCollection.
            </summary>
        </member>
        <member name="E:MochaDB.MochaColumnCollection.ColumnNameChanged">
            <summary>
            This happens after NameChanged event of any item in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.Clear">
            <summary>
            Remove all items.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.Add(MochaDB.MochaColumn)">
            <summary>
            Add item.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.Add(System.String)">
            <summary>
            Add item.
            </summary>
            <param name="name">Name of item.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.Add(System.String,MochaDB.MochaDataType)">
            <summary>
            Add item.
            </summary>
            <param name="name">Name of item.</param>
            <param name="datatype">Datatype of item.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.AddRange(System.Collections.Generic.IEnumerable{MochaDB.MochaColumn})">
            <summary>
            Add item from range.
            </summary>
            <param name="items">Range to add items.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.Remove(MochaDB.MochaColumn)">
            <summary>
            Remove item.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.Remove(System.String)">
            <summary>
            Remove item by name.
            </summary>
            <param name="name">Name of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item by index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.IndexOf(System.String)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="name">Name of item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.Contains(System.String)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="name">Name of item to exists check.</param>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.GetFirst">
            <summary>
            Return first element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnCollection.GetLast">
            <summary>
            Return last element in collection.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumnCollection.Item(System.String)">
            <summary>
            Return item by name.
            </summary>
            <param name="name">Name of item.</param>
        </member>
        <member name="T:MochaDB.MochaColumnDataCollection">
            <summary>
            MochaData collector for MochaColumns.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.#ctor(MochaDB.MochaDataType)">
            <summary>
            Create new MochaColumnDataCollection.
            </summary>
            <param name="dataType">DataType of column.</param>
        </member>
        <member name="E:MochaDB.MochaColumnDataCollection.Changed">
            <summary>
            This happens after collection changed.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.Clear">
            <summary>
            Remove all items.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.Add(MochaDB.MochaData)">
            <summary>
            Add item.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.AddData(System.Object)">
            <summary>
            Add data.
            </summary>
            <param name="data">Data to add.</param>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.AddRange(System.Collections.Generic.IEnumerable{MochaDB.MochaData})">
            <summary>
            Add item from range.
            </summary>
            <param name="items">Range to add items.</param>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.Remove(MochaDB.MochaData)">
            <summary>
            Remove item.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.RemoveAllData(System.Object)">
            <summary>
            Removes all data equal to sample data.
            </summary>
            <param name="data">Sample data.</param>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.RemoveAt(System.Int32)">
            <summary>
            Remove item by index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.ContainsData(System.Object)">
            <summary>
            Return true if data is contained but return false if not exists.
            </summary>
            <param name="data">Data to check.</param>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.GetFirst">
            <summary>
            Return first element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaColumnDataCollection.GetLast">
            <summary>
            Return last element in collection.
            </summary>
        </member>
        <member name="P:MochaDB.MochaColumnDataCollection.DataType">
            <summary>
            Data type of column.
            </summary>
        </member>
        <member name="T:MochaDB.MochaConvert">
            <summary>
            Converter for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaConvert.GetStringBytes(System.String)">
            <summary>
            Returns bytes of string with UTF8 encoding.
            </summary>
            <param name="value">String value.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.GetStringBytes(System.String,System.Text.Encoding)">
            <summary>
            Returns bytes of string with encoding.
            </summary>
            <param name="value">String value.</param>
            <param name="encoding">Encoding.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.GetStringBytes(System.String,System.String)">
            <summary>
            Returns bytes of string with encoding.
            </summary>
            <param name="value">String value.</param>
            <param name="encoding">Name of encoding.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToBase64String(System.Byte[])">
            <summary>
            Returns Base64 string from bytes.
            </summary>
            <param name="bytes">Bytes.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToBase64String(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Returns Base64 string from bytes.
            </summary>
            <param name="bytes">Bytes.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.FromBase64String(System.String)">
            <summary>
            Returns Base64 bytes from Base64 string.
            </summary>
            <param name="value">Bytes.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.String)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Char)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Int32)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Int64)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Int16)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.UInt32)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.UInt64)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.UInt16)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Byte)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.SByte)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Single)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Decimal)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Double)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.Boolean)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToMochaData(System.DateTime)">
            <summary>
            Returns value as MochaData.
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToXmlTable(MochaDB.MochaTable)">
            <summary>
            Returns table as XmlReader.
            </summary>
            <param name="table">Table to convert.</param>
        </member>
        <member name="M:MochaDB.MochaConvert.ToXmlTable(MochaDB.Mhql.MochaTableResult)">
            <summary>
            Returns table as XmlReader.
            </summary>
            <param name="table">Table to convert.</param>
        </member>
        <member name="T:MochaDB.MochaData">
            <summary>
            This is data object for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaData.#ctor">
            <summary>
            Create new MochaData.
            </summary>
        </member>
        <member name="M:MochaDB.MochaData.#ctor(MochaDB.MochaDataType,System.Object)">
            <summary>
            Create new MochaData.
            </summary>
            <param name="dataType">Data type of data.</param>
            <param name="data">Data value.</param>
        </member>
        <member name="M:MochaDB.MochaData.Parse(System.Object)">
            <summary>
            Convert value to MochaData.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:MochaDB.MochaData.TryParse(System.Object,MochaDB.MochaData@)">
            <summary>
            Try convert value to MochaData.
            </summary>
            <param name="value">Value.</param>
            <param name="data">Output.</param>
        </member>
        <member name="M:MochaDB.MochaData.IsType(MochaDB.MochaDataType,System.Object)">
            <summary>
            Return the data equality to the data type.
            </summary>
            <param name="dataType">Base datatype.</param>
            <param name="data">Data to check.</param>
        </member>
        <member name="M:MochaDB.MochaData.GetDataTypeFromName(System.String)">
            <summary>
            Return MochaDataType by name.
            </summary>
            <param name="name">Name of MochaDataType.</param>
        </member>
        <member name="M:MochaDB.MochaData.GetTypeFromDataType(MochaDB.MochaDataType)">
            <summary>
            Return Type object from DataType targeting data.
            </summary>
            <param name="dataType">Targeted data type.</param>
        </member>
        <member name="M:MochaDB.MochaData.GetDataTypeFromType(System.Type)">
            <summary>
            Return MochaDataType from Type object.
            </summary>
            <param name="type">Type object.</param>
        </member>
        <member name="M:MochaDB.MochaData.GetDataFromString(MochaDB.MochaDataType,System.String)">
            <summary>
            Return the object value according to the data type from the string value.
            </summary>
            <param name="dataType">Targetting data type.</param>
            <param name="data">String data.</param>
        </member>
        <member name="M:MochaDB.MochaData.TryGetData(MochaDB.MochaDataType,System.Object)">
            <summary>
            Return data if the conversion successfully, but return null if not successfully.
            </summary>
            <param name="dataType">Targeting data type.</param>
            <param name="data">Data to convert.</param>
        </member>
        <member name="M:MochaDB.MochaData.IsNumericType(MochaDB.MochaDataType)">
            <summary>
            Returns true if datatype is numeric, returns false if not.
            </summary>
            <param name="type">Datatype to check.</param>
        </member>
        <member name="M:MochaDB.MochaData.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaData.Data"/> as string with UTF8.
            </summary>
        </member>
        <member name="P:MochaDB.MochaData.Data">
            <summary>
            Data value.
            </summary>
        </member>
        <member name="P:MochaDB.MochaData.DataType">
            <summary>
            Data type of this data
            </summary>
        </member>
        <member name="T:MochaDB.MochaDataType">
            <summary>
            DataTypes for MochaDB.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Int16">
            <summary>
            16-bit signed integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Int32">
            <summary>
            32-bit signed integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Int64">
            <summary>
            64-bit signed integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.UInt16">
            <summary>
            16-bit unsigned integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.UInt32">
            <summary>
            32-bit unsigned integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.UInt64">
            <summary>
            64-bit unsigned integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Double">
            <summary>
            Double-precision floating-point number.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Float">
            <summary>
            Single-precision floating-point number.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Decimal">
            <summary>
            Decimal floating-point number.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Byte">
            <summary>
            8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.DateTime">
            <summary>
            Date, Time, Date + Time.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.SByte">
            <summary>
            8-bit signed integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Boolean">
            <summary>
            True or False
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Char">
            <summary>
            UTF16 Character.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.AutoInt">
            <summary>
            Auto-incrementing 32-bit integer.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Unique">
            <summary>
            Unique string.
            </summary>
        </member>
        <member name="F:MochaDB.MochaDataType.Bit">
            <summary>
            Binary digit.
            </summary>
        </member>
        <member name="T:MochaDB.MochaDatabase">
            <summary>
            MochaDatabase provides management of a MochaDB database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.#ctor(System.String)">
            <summary>
            Create new MochaDatabase.
            </summary>
            <param name="connectionString">Connection string for connect to MochaDb database.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.#ctor(System.String,System.String)">
            <summary>
            Create new MochaDatabase.
            </summary>
            <param name="path">Directory path of MochaDB database.</param>
            <param name="password">Password of MochaDB database.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.#ctor(MochaDB.Connection.MochaProvider)">
            <summary>
            Create new MochaDatabase.
            </summary>
            <param name="provider">Provider for connect database.</param>
        </member>
        <member name="E:MochaDB.MochaDatabase.ConnectionCheckRequired">
            <summary>
            This happens before connection check.
            </summary>
        </member>
        <member name="E:MochaDB.MochaDatabase.Changing">
            <summary>
            This happens before content changed.
            </summary>
        </member>
        <member name="E:MochaDB.MochaDatabase.Changed">
            <summary>
            This happens after content changed.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetXML">
            <summary>
            Return xml schema of database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetXDocument">
            <summary>
            Return XDocument of database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetBuildStackItem(System.String,System.String,MochaDB.MochaStackItem)">
            <summary>
            Returns MochaScript build code od stack item.
            </summary>
            <param name="stackName">Parent stack of StackItem.</param>
            <param name="path">Path of StackItem.</param>
            <param name="item">StackItem to get code.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetBuildFuncSectors">
            <summary>
            Returns MochaScript build func of sectors.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetBuildFuncStacks">
            <summary>
            Returns MochaScript build func of stacks.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetBuildFuncTables">
            <summary>
            Returns MochaScript build func of tables.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetMochaScript">
            <summary>
            Return MochaScript build code of database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.Connect">
            <summary>
            Connect to database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.Disconnect">
            <summary>
            Disconnect from database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.IsMochaDB(System.String)">
            <summary>
            Returns true if the file in the path is Mocha DB and false otherwise.
            </summary>
            <param name="path">Path to check.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.CreateMochaDB(System.String,System.String,System.String)">
            <summary>
            Create new MochaDB database.
            </summary>
            <param name="path">The file path to be created. (Including name, excluding extension)</param>
            <param name="description">Description of database.</param>
            <param name="password">Password of database.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.CheckMochaDB(System.String)">
            <summary>
            Checks the suitability and robustness of the MochaDB database.
            </summary>
            <param name="path">The file path of the MochaDB database to be checked.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.CheckMochaDB">
            <summary>
            Checks the suitability and robustness of the MochaDB database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetXElement(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Return element by path.
            </summary>
            <param name="doc">XDocument.</param>
            <param name="path">Path of element.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsElement(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Checks for the presence of the element.
            </summary>
            <param name="doc">XDocument.</param>
            <param name="path">Path of element.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.Save">
            <summary>
            Save MochaDB database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.KeepLog">
            <summary>
            Keep log of database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetPassword">
            <summary>
            Returns the password of the MochaDB database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetPassword(System.String)">
            <summary>
            Sets the MochaDB Database password.
            </summary>
            <param name="password">Password to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetDescription">
            <summary>
            Returns the description of the database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetDescription(System.String)">
            <summary>
            Sets the description of the database.
            </summary>
            <param name="Description">Description to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ClearAll">
            <summary>
            Remove all sectors, stacks, tables and others.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.Reset">
            <summary>
            MochaDB checks the existence of the database file and if not creates a new file. ALL DATA IS LOST!
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.CopySchema(MochaDB.MochaDatabaseSchema)">
            <summary>
            Copy database content from schema.
            </summary>
            <param name="schema">Database schema to copy.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetSchema">
            <summary>
            Returns schema of database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.Copy(MochaDB.MochaDatabase)">
            <summary>
            Copy this database to destination database. Returns true is copying is success, returns false if not.
            </summary>
            <param name="destination">Destination MochaDatabase.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.CopyFrom(MochaDB.MochaDatabase)">
            <summary>
            Copy database content from destination database. Returns true is copying is success, returns false if not.
            </summary>
            <param name="destination">Destination MochaDatabase.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ClearSectors">
            <summary>
            Remove all sectors.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddSector(MochaDB.MochaSector)">
            <summary>
            Add sector.
            </summary>
            <param name="sector">MochaSector object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddSector(System.String)">
            <summary>
            Add sector.
            </summary>
            <param name="name">Name of sector to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddSector(System.String,System.String)">
            <summary>
            Add sector.
            </summary>
            <param name="name">Name of sector.</param>
            <param name="data">Data of sector.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RemoveSector(System.String)">
            <summary>
            Remove sector by name. Returns true if sector is exists and removed.
            </summary>
            <param name="name">Name of sector to remove.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RenameSector(System.String,System.String)">
            <summary>
            Rename sector.
            </summary>
            <param name="name">Name of sector to rename.</param>
            <param name="newName">New name of sector.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetSectorData(System.String)">
            <summary>
            Returns data of sector by name.
            </summary>
            <param name="name">Name of sector.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetSectorData(System.String,System.String)">
            <summary>
            Set data of sector by name.
            </summary>
            <param name="name">Name of sector.</param>
            <param name="data">Data to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetSectorDescription(System.String)">
            <summary>
            Returns description of sector by name.
            </summary>
            <param name="name">Name of sector.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetSectorDescription(System.String,System.String)">
            <summary>
            Set description of sector by name.
            </summary>
            <param name="name">Name of sector.</param>
            <param name="description">Description to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetSector(System.String)">
            <summary>
            Returns sector by name.
            </summary>
            <param name="name">Name of sector.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetSectors">
            <summary>
            Returns all sectors in database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsSector(System.String)">
            <summary>
            Returns whether there is a sector with the specified name.
            </summary>
            <param name="name">Name of sector to check.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ClearStacks">
            <summary>
            Remove all stacks.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddStack(MochaDB.MochaStack)">
            <summary>
            Add stack.
            </summary>
            <param name="stack">MohcaStack object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RemoveStack(System.String)">
            <summary>
            Remove stack by name. Returns stack if table is exists and removed.
            </summary>
            <param name="name">Name of stack to remove.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetStackDescription(System.String)">
            <summary>
            Returns description of stack by name.
            </summary>
            <param name="name">Name of stack.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetStackDescription(System.String,System.String)">
            <summary>
            Set description of stack by name.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="description">Description to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RenameStack(System.String,System.String)">
            <summary>
            Rename stack.
            </summary>
            <param name="name">Name of stack to rename.</param>
            <param name="newName">New name of stack.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetStack(System.String)">
            <summary>
            Returns stack by name.
            </summary>
            <param name="name">Name of stack.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetStacks">
            <summary>
            Returns all stacks in database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsStack(System.String)">
            <summary>
            Returns whether there is a stack with the specified name.
            </summary>
            <param name="name">Name of stack to check.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetMochaStackItemXML(MochaDB.MochaStackItem)">
            <summary>
            Return XElement from MochaStackItem.
            </summary>
            <param name="item">MochaStackItem object.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddStackItem(System.String,System.String,MochaDB.MochaStackItem)">
            <summary>
            Add stack item.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="path">Path of stack item.</param>
            <param name="item">MochaStackItem object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RemoveStackItem(System.String,System.String)">
            <summary>
            Remove item of stack.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetStackItemValue(System.String,System.String,System.String)">
            <summary>
            Set value of stack item.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="value">Value to set.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetStackItemValue(System.String,System.String)">
            <summary>
            Return value of stack item.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetStackItemDescription(System.String,System.String,System.String)">
            <summary>
            Set description of stack item.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="description">Description to set.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetStackItemDescription(System.String,System.String)">
            <summary>
            Return description of stack item.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RenameStackItem(System.String,System.String,System.String)">
            <summary>
            Rename stack item.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="newName">New name of stack item.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetStackItem(System.String,System.String)">
            <summary>
            Return StackItem.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsStackItem(System.String,System.String)">
            <summary>
            Returns whether there is a stack item with the specified name.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="path">Path of stack item.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ClearTables">
            <summary>
            Remove all tables.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddTable(MochaDB.MochaTable)">
            <summary>
            Add table.
            </summary>
            <param name="table">MochaTable object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.CreateTable(System.String)">
            <summary>
            Create new table.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RemoveTable(System.String)">
            <summary>
            Remove table by name. Returns true if table is exists and removed.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RenameTable(System.String,System.String)">
            <summary>
            Rename table.
            </summary>
            <param name="name">Name of table to rename.</param>
            <param name="newName">New name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetTableDescription(System.String)">
            <summary>
            Returns description of table by name.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetTableDescription(System.String,System.String)">
            <summary>
            Set description of table by name.
            </summary>
            <param name="name">Name of table.</param>
            <param name="description">Description to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetTable(System.String)">
            <summary>
            Returns table by name.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetTables">
            <summary>
            Returns all tables in database.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsTable(System.String)">
            <summary>
            Returns whether there is a table with the specified name.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddColumn(System.String,MochaDB.MochaColumn)">
            <summary>
            Add colum in table.
            </summary>
            <param name="tableName">Name of column.</param>
            <param name="column">MochaColumn object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.CreateColumn(System.String,System.String)">
            <summary>
            Create column in table.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RemoveColumn(System.String,System.String)">
            <summary>
            Remove column from table by name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RenameColumn(System.String,System.String,System.String)">
            <summary>
            Rename column.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column to rename.</param>
            <param name="newName">New name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetColumnDescription(System.String,System.String)">
            <summary>
            Returns description of column by name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetColumnDescription(System.String,System.String,System.String)">
            <summary>
            Set description of column by name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
            <param name="description">Description to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetColumn(System.String,System.String)">
            <summary>
            Returns column from table by name
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetColumns(System.String)">
            <summary>
            Returns all columns in table by name.
            </summary>
            <param name="tableName">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsColumn(System.String,System.String)">
            <summary>
            Returns whether there is a column with the specified name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetColumnDataType(System.String,System.String)">
            <summary>
            Returns column datatype by name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.SetColumnDataType(System.String,System.String,MochaDB.MochaDataType)">
            <summary>
            Set column datatype by name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
            <param name="dataType">MochaDataType to set.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetColumnAutoIntState(System.String,System.String)">
            <summary>
            Returns column's last AutoInt value by name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="name">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddRow(System.String,MochaDB.MochaRow)">
            <summary>
            Add row in table.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="row">MochaRow object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddRow(System.String,System.Object[])">
            <summary>
            Add row in table.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="datas">Datas of row.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.RemoveRow(System.String,System.Int32)">
            <summary>
            Remove row from table by index.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="index">Index of row to remove.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetRow(System.String,System.Int32)">
            <summary>
            Returns row from table by index.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="index">Index of row.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetRows(System.String)">
            <summary>
            Returns all rows in table by name.
            </summary>
            <param name="tableName">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ClearRows(System.String)">
            <summary>
            Clear all rows of table.
            </summary>
            <param name="tableName">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.InternalAddData(System.String,System.String,MochaDB.MochaData)">
            <summary>
            Add data.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">MochaData object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.InternalUpdateData(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Update data by index.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="index">Index of data.</param>
            <param name="data">Data to replace.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.InternalUpdateFirstData(System.String,System.String,System.Object)">
            <summary>
            Update first data.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">Data to replace.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.InternalUpdateLastData(System.String,System.String,System.Object)">
            <summary>
            Update last data.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">Data to replace.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddData(System.String,System.String,MochaDB.MochaData)">
            <summary>
            Add data.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">MochaData object to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.AddData(System.String,System.String,System.Object)">
            <summary>
            Add data.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">Data to add.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.UpdateData(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Update data by index.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="index">Index of data.</param>
            <param name="data">Data to replace.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.UpdateFirstData(System.String,System.String,System.Object)">
            <summary>
            Update first data.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">Data to replace.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.UpdateLastData(System.String,System.String,System.Object)">
            <summary>
            Update last data.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">Data to replace.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsData(System.String,System.String,MochaDB.MochaData)">
            <summary>
            Returns whether there is a data with the specified.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">MochaData object to check.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsData(System.String,System.String,System.Object)">
            <summary>
            Returns whether there is a data with the specified.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">Data to check.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetDataIndex(System.String,System.String,System.Object)">
            <summary>
            Returns data index. If there are two of the same data, it returns the index of the one you found first!
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="data">Data to find index.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetData(System.String,System.String,System.Int32)">
            <summary>
            Returns data by index.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="index">Index of data.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetDatas(System.String,System.String)">
            <summary>
            Returns all datas in column in table by name.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetDataCount(System.String,System.String)">
            <summary>
            Returns data count of table's column.
            </summary>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ClearLogs">
            <summary>
            Clear all logs.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetLogs">
            <summary>
            Returns all logs.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.ReadLogs">
            <summary>
            Real all logs.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.RestoreToLastLog">
            <summary>
            Restore database to last keeped log.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.RestoreToFirstLog">
            <summary>
            Restore database to first keeped log.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabase.RestoreToLog(System.String)">
            <summary>
            Restore database to log by id.
            </summary>
            <param name="id">ID of log to restore.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsLog(System.String)">
            <summary>
            Returns whether there is a log with the specified id.
            </summary>
            <param name="id">ID of log.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ExistsElement(MochaDB.MochaPath)">
            <summary>
            Returns whether there is a path with the specified path.
            </summary>
            <param name="path">Path to check.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetElement(MochaDB.MochaPath)">
            <summary>
            Return element by path.
            </summary>
            <param name="path">Path of element.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.GetElements(MochaDB.MochaPath)">
            <summary>
            Returns sub elements of element in path.
            </summary>
            <param name="path">Path of base element.</param>
        </member>
        <member name="M:MochaDB.MochaDatabase.ToString">
            <summary>
            Returns result of <see cref="M:MochaDB.MochaDatabase.GetMochaScript"/>
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.Version">
            <summary>
            Version of MochaDB.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.Doc">
            <summary>
            XML Document.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.SuspendChangeEvents">
            <summary>
            Suspend the changeds events.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.Provider">
            <summary>
            Connection provider.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.Logs">
            <summary>
            Log keeping status.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.Query">
            <summary>
            Mapped MochaQuery.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.State">
            <summary>
            State of connection.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabase.Name">
            <summary>
            Name of database.
            </summary>
        </member>
        <member name="T:MochaDB.MochaDatabaseSchema">
            <summary>
            Database schema for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabaseSchema.#ctor">
            <summary>
            Create a new MochaDatabaseSchema.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabaseSchema.SectorsToRead">
            <summary>
            Returns sectors in MochaReader.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabaseSchema.StacksToRead">
            <summary>
            Returns stacks in MochaReader.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDatabaseSchema.TablesToRead">
            <summary>
            Returns tables in MochaReader.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabaseSchema.Sectors">
            <summary>
            Sectors of database.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabaseSchema.Stacks">
            <summary>
            Stack of database.
            </summary>
        </member>
        <member name="P:MochaDB.MochaDatabaseSchema.Tables">
            <summary>
            Tables of database.
            </summary>
        </member>
        <member name="T:MochaDB.MochaDataCollection">
            <summary>
            MochaData collector.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDataCollection.#ctor">
            <summary>
            Create new MochaDataCollection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaDataCollection.RemoveAllData(System.Object)">
            <summary>
            Removes all data equal to sample data.
            </summary>
            <param name="data">Sample data.</param>
        </member>
        <member name="T:MochaDB.MochaElement">
            <summary>
            Element for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaElement.#ctor(System.String)">
            <summary>
            Create a new MochaElement.
            </summary>
            <param name="name">Name of element.</param>
        </member>
        <member name="M:MochaDB.MochaElement.#ctor(System.String,System.String)">
            <summary>
            Create a new MochaElement.
            </summary>
            <param name="name">Name of element.</param>
            <param name="description">Description of element.</param>
        </member>
        <member name="M:MochaDB.MochaElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new MochaElement.
            </summary>
            <param name="name">Name of element.</param>
        </member>
        <member name="M:MochaDB.MochaElement.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaElement.Value"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaElement.Name">
            <summary>
            Name of element.
            </summary>
        </member>
        <member name="P:MochaDB.MochaElement.Description">
            <summary>
            Description of element.
            </summary>
        </member>
        <member name="P:MochaDB.MochaElement.Value">
            <summary>
            Value of element.
            </summary>
        </member>
        <member name="T:MochaDB.MochaException">
            <summary>
            Exception for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaException.#ctor">
            <summary>
            Create a new MochaException.
            </summary>
        </member>
        <member name="M:MochaDB.MochaException.#ctor(System.String)">
            <summary>
            Create a new MochaException.
            </summary>
            <param name="msg">Message of exception.</param>
        </member>
        <member name="M:MochaDB.MochaException.SetMessage(System.String)">
            <summary>
            Set exception message.
            </summary>
            <param name="msg">Message to set.</param>
        </member>
        <member name="M:MochaDB.MochaException.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaException.Message"/>
            </summary>
        </member>
        <member name="P:MochaDB.MochaException.Message">
            <summary>
            Message of exception.
            </summary>
        </member>
        <member name="T:MochaDB.MochaID">
            <summary>
            ID for MochaID.
            </summary>
        </member>
        <member name="M:MochaDB.MochaID.#ctor(System.String)">
            <summary>
            Create a new MochaID.
            </summary>
            <param name="id">ID Value.</param>
        </member>
        <member name="M:MochaDB.MochaID.#ctor(MochaDB.MochaIDType)">
            <summary>
            Create a new MochaID.
            </summary>
            <param name="type">ID type.</param>
        </member>
        <member name="M:MochaDB.MochaID.Flat">
            <summary>
            Flat ID algorithm.
            </summary>
        </member>
        <member name="M:MochaDB.MochaID.Bit">
            <summary>
            Bit ID algorithm.
            </summary>
        </member>
        <member name="M:MochaDB.MochaID.Hexabit">
            <summary>
            Hexabit ID algorithm.
            </summary>
        </member>
        <member name="M:MochaDB.MochaID.Hexabitx">
            <summary>
            Hexabitx ID algorithm.
            </summary>
        </member>
        <member name="M:MochaDB.MochaID.Hash(System.Int32)">
            <summary>
            Hash ID algorithms.
            </summary>
        </member>
        <member name="M:MochaDB.MochaID.GetID(MochaDB.MochaIDType)">
            <summary>
            Get ID by ID Type.
            </summary>
            <param name="type">ID type.</param>
        </member>
        <member name="M:MochaDB.MochaID.SetValue(MochaDB.MochaIDType)">
            <summary>
            Set id value by ID type.
            </summary>
            <param name="type">Type of ID.</param>
        </member>
        <member name="M:MochaDB.MochaID.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaID.Value"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaID.Value">
            <summary>
            ID.
            </summary>
        </member>
        <member name="T:MochaDB.MochaIDType">
            <summary>
            Enum for MochaID types.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Flat">
            <summary>
            ID by chars.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Bit">
            <summary>
            ID by digits.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Hexabit">
            <summary>
            ID by combining of char and digit.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Hexabitx">
            <summary>
            Complex hexabit ID.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Hash248">
            <summary>
            248Bit Hash ID.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Hash128">
            <summary>
            128Bit Hash ID.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Hash64">
            <summary>
            64Bit Hash ID.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Hash32">
            <summary>
            32Bit Hash ID.
            </summary>
        </member>
        <member name="F:MochaDB.MochaIDType.Hash16">
            <summary>
            16Bit Hash ID.
            </summary>
        </member>
        <member name="T:MochaDB.MochaPath">
            <summary>
            MochaDB path definer.
            </summary>
        </member>
        <member name="M:MochaDB.MochaPath.#ctor(System.String)">
            <summary>
            Create a new MochaPath.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:MochaDB.MochaPath.ParentDirectory">
            <summary>
            Go to the parent directory.
            </summary>
        </member>
        <member name="M:MochaDB.MochaPath.ParentPath">
            <summary>
            Return parent directory's MochaPath object.
            </summary>
        </member>
        <member name="M:MochaDB.MochaPath.Name">
            <summary>
            Returns name of current directory or file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MochaDB.MochaPath.IsDatabasePath">
            <summary>
            Returns true if the path is compatible with database paths, false if not.
            </summary>
        </member>
        <member name="M:MochaDB.MochaPath.ToElement">
            <summary>
            Returns MochaPath converted to MochaElement.
            </summary>
        </member>
        <member name="M:MochaDB.MochaPath.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaPath.Path"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaPath.Root">
            <summary>
            Root path.
            </summary>
        </member>
        <member name="P:MochaDB.MochaPath.Sectors">
            <summary>
            Sectors path.
            </summary>
        </member>
        <member name="P:MochaDB.MochaPath.Stacks">
            <summary>
            Stacks path.
            </summary>
        </member>
        <member name="P:MochaDB.MochaPath.Tables">
            <summary>
            Tables path.
            </summary>
        </member>
        <member name="P:MochaDB.MochaPath.Logs">
            <summary>
            Logs path.
            </summary>
        </member>
        <member name="P:MochaDB.MochaPath.Path">
            <summary>
            Path.
            </summary>
        </member>
        <member name="T:MochaDB.Mochaq.MochaQCommand">
            <summary>
            MochaQ query for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQCommand.#ctor(System.String)">
            <summary>
            Create new MochaQCommand.
            </summary>
            <param name="command">MochaQ command.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQCommand.SetCommand(System.String)">
            <summary>
            Set command.
            </summary>
            <param name="command">Command to set.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQCommand.IsDynamicQuery">
            <summary>
            Return true if this MochaQ command ise Dynamic command but return false if not.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQCommand.IsGetRunQuery">
            <summary>
            Return true if this MochaQ command ise GetRun command but return false if not.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQCommand.IsRunQuery">
            <summary>
            Return true if this MochaQ command ise Run command but return false if not.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQCommand.ToString">
            <summary>
            Returns <see cref="P:MochaDB.Mochaq.MochaQCommand.Command"/>.
            </summary>
        </member>
        <member name="P:MochaDB.Mochaq.MochaQCommand.Command">
            <summary>
            MochaQ command.
            </summary>
        </member>
        <member name="T:MochaDB.Mochaq.MochaQuery">
            <summary>
            It offers query usage and management with MochaQ.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.#ctor(MochaDB.MochaDatabase,System.Boolean)">
            <summary>
            Create new MochaQuery.
            </summary>
            <param name="database">MochaDatabase object to use querying.</param>
            <param name="embedded">Is embedded query in database.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create new MochaQuery.
            </summary>
            <param name="database">MochaDatabase object to use querying.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.#ctor(MochaDB.MochaDatabase,System.String)">
            <summary>
            Create new MochaQuery.
            </summary>
            <param name="database">MochaDatabase object to use querying.</param>
            <param name="mochaQ">MochaQuery to use.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.ExecuteCommand(System.String)">
            <summary>
            Detect command type and execute. Returns result if exists returned result.
            </summary>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.ExecuteCommand(MochaDB.MochaDatabase,System.String)">
            <summary>
            Detect command type and execute. Returns result if exists returned result.
            </summary>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.ExecuteCommand">
            <summary>
            Detect command type and execute. Returns result if exists returned result.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.Dynamic(System.String)">
            <summary>
            If the value is returned, it returns the function and performs the function; if not, it just performs the function.
            </summary>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.Dynamic(MochaDB.MochaDatabase,System.String)">
            <summary>
            If the value is returned, it returns the function and performs the function; if not, it just performs the function.
            </summary>
            <param name="database">MochaDatabase object that provides management of the targeted MochaDB database.</param>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.Dynamic">
            <summary>
            If the value is returned, it returns the function and performs the function; if not, it just performs the function.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.Run(System.String)">
            <summary>
            Runs the active MochaQ query. Even if there is an incoming value, it will not return.
            </summary>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.Run(MochaDB.MochaDatabase,System.String)">
            <summary>
            Runs the active MochaQ query. Even if there is an incoming value, it will not return.
            </summary>
            <param name="database">MochaDatabase object that provides management of the targeted MochaDB database.</param>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.Run">
            <summary>
            Runs the active MochaQ query. Even if there is an incoming value, it will not return.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.GetRun(System.String)">
            <summary>
            Runs the active MochaQ query. Returns the incoming value.
            </summary>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.GetRun(MochaDB.MochaDatabase,System.String)">
            <summary>
            Runs the active MochaQ query. Returns the incoming value.
            </summary>
            <param name="database">MochaDatabase object that provides management of the targeted MochaDB database.</param>
            <param name="mochaQ">MochaQ to be set as the active MochaQ Query.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.GetRun">
            <summary>
            Runs the active MochaQ query. Returns the incoming value.
            </summary>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.COLUMNCOUNT(System.String)">
            <summary>
            Return column count of table.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.GETDATAS(System.String)">
            <summary>
            Return all datas of table.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.GETFIRSTCOLUMN_NAME(System.String)">
            <summary>
            Return first column name of table.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.Mochaq.MochaQuery.ToString">
            <summary>
            Returns command property value of <see cref="P:MochaDB.Mochaq.MochaQuery.MochaQ"/>.
            </summary>
        </member>
        <member name="P:MochaDB.Mochaq.MochaQuery.IsDatabaseEmbedded">
            <summary>
            Is embedded query in database.
            </summary>
        </member>
        <member name="P:MochaDB.Mochaq.MochaQuery.Database">
            <summary>
            MochaDatabase object to use querying.
            </summary>
        </member>
        <member name="P:MochaDB.Mochaq.MochaQuery.MochaQ">
            <summary>
            Active MochaQ query.
            </summary>
        </member>
        <member name="T:MochaDB.MochaReadonlyCollection`1">
            <summary>
            Base class for MochaDB readonly collections.
            </summary>    
            <typeparam name="T">Item type.</typeparam>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.GetFirst">
            <summary>
            Return first element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.GetLast">
            <summary>
            Return last element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.IndexOf(`0)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="item">Item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.Contains(`0)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="item">Item to exists check.</param>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.MaxIndex">
            <summary>
            Return max index of item count.
            </summary>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.IsEmptyCollection">
            <summary>
            Return true if is empty collection but return false if not.
            </summary>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.ElementAt(System.Int32)">
            <summary>
            Return element by index.
            </summary>
            <param name="index">Index of element.</param>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.ToArray">
            <summary>
            Create and return static array from collection.
            </summary>
        </member>
        <!-- Kötü biçimli XML yorumu "M:MochaDB.MochaReadonlyCollection`1.ToList" üyesi için yoksayıldı -->
        <member name="M:MochaDB.MochaReadonlyCollection`1.ToReader">
            <summary>
            Returns values in MochaReader.
            </summary>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy items to array by start index.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Index to start copying.</param>
        </member>
        <member name="M:MochaDB.MochaReadonlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
        </member>
        <member name="P:MochaDB.MochaReadonlyCollection`1.Item(System.Int32)">
            <summary>
            Return item by index.
            </summary>
            <param name="index">Index of item.</param>
        </member>
        <member name="P:MochaDB.MochaReadonlyCollection`1.Count">
            <summary>
            Count of items.
            </summary>
        </member>
        <member name="P:MochaDB.MochaReadonlyCollection`1.IsReadOnly">
            <summary>
            Is Readonly collection.
            </summary>
        </member>
        <member name="T:MochaDB.MochaRow">
            <summary>
            This is row object for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaRow.#ctor">
            <summary>
            Create new MochaRow.
            </summary>
        </member>
        <member name="M:MochaDB.MochaRow.#ctor(MochaDB.MochaData[])">
            <summary>
            Create new MochaRow.
            </summary>
            <param name="datas">Datas of row.</param>
        </member>
        <member name="M:MochaDB.MochaRow.#ctor(System.Collections.Generic.IEnumerable{MochaDB.MochaData})">
            <summary>
            Create new MochaRow.
            </summary>
            <param name="datas">Datas of row.</param>
        </member>
        <member name="M:MochaDB.MochaRow.#ctor(System.Object[])">
            <summary>
            Create new MochaRow.
            </summary>
            <param name="datas">Datas of row.</param>
        </member>
        <member name="P:MochaDB.MochaRow.Datas">
            <summary>
            Datas of row.
            </summary>
        </member>
        <member name="T:MochaDB.MochaRowCollection">
            <summary>
            MochaRow collector.
            </summary>
        </member>
        <member name="M:MochaDB.MochaRowCollection.#ctor">
            <summary>
            Create new MochaRowCollection.
            </summary>
        </member>
        <member name="E:MochaDB.MochaRowCollection.RowChanged">
            <summary>
            This happens after Changed event of any item in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaRowCollection.Add(MochaDB.MochaData[])">
            <summary>
            Add item.
            </summary>
            <param name="datas">Datas of item.</param>
        </member>
        <member name="M:MochaDB.MochaRowCollection.Add(System.Collections.Generic.IEnumerable{MochaDB.MochaData})">
            <summary>
            Add item.
            </summary>
            <param name="datas">Datas of item.</param>
        </member>
        <member name="M:MochaDB.MochaRowCollection.Add(System.Object[])">
            <summary>
            Add item.
            </summary>
            <param name="datas">Datas of item.</param>
        </member>
        <member name="T:MochaDB.MochaScript.Keywords.Keyword_Begin">
            <summary>
            The "Begin" keyword.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.Keywords.Keyword_Begin.GetIndex(System.String[])">
            <summary>
            Return index if find but return -1 if not find.
            </summary>
            <param name="source">MochaScript code as lines.</param>
        </member>
        <member name="T:MochaDB.MochaScript.Keywords.Keyword_Final">
            <summary>
            The "Final" keyword.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.Keywords.Keyword_Final.GetIndex(System.String[])">
            <summary>
            Return index if find but return -1 if not find.
            </summary>
            <param name="source">MochaScript code as lines.</param>
        </member>
        <member name="T:MochaDB.MochaScript.MochaScriptCodeProcessor">
            <summary>
            MochaScript code processor.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptCodeProcessor.#ctor">
            <summary>
            Create new MochaScriptCodeProcessor.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptCodeProcessor.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create new MochaScriptCodeProcessor.
            </summary>
            <param name="source">MochaScript code as lines.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptCodeProcessor.CheckBrackets(System.Int32,System.Char,System.Char)">
            <summary>
            Check brackets.
            </summary>
            <param name="startIndex">Index to start finding.</param>
            <param name="openBracket">Open bracket char.</param>
            <param name="closeBracket">Close bracket char.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptCodeProcessor.GetCloseBracketIndex(System.Int32,System.Char,System.Char)">
            <summary>
            Find and get close bracket index.
            </summary>
            <param name="startIndex">Index to start finding.</param>
            <param name="openBracket">Open bracket char.</param>
            <param name="closeBracket">Close bracket char.</param>
        </member>
        <member name="P:MochaDB.MochaScript.MochaScriptCodeProcessor.Source">
            <summary>
            MochaScript code as lines.
            </summary>
        </member>
        <member name="T:MochaDB.MochaScript.MochaScriptDebugger">
            <summary>
            Process, debug and run MochaScript codes.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.#ctor(System.String)">
            <summary>
            Create new MochaScriptDebugger.
            </summary>
            <param name="path">Path of MochaScript file.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.Throw(System.Int32,System.String)">
            <summary>
            Throw exception.
            </summary>
            <param name="line">Line.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.ProcessRange(System.Int32,System.Int32)">
            <summary>
            Process range.
            </summary>
            <param name="startIndex">Process start index.</param>
            <param name="endIndex">Process end index.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.Process_if(System.Int32)">
            <summary>
            Process if.
            </summary>
            <param name="startIndex">Process start index.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.TryVariable(System.Int32)">
            <summary>
            Try define variable.
            </summary>
            <param name="index">Index of line.</param>
            <returns>True if variable is defined successfully but false if not.</returns>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.IsBannedSyntax(System.String)">
            <summary>
            Get syntax ban state.
            </summary>
            <param name="syntax">Check syntax.</param>
            <returns>true if banned but false if no.</returns>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.CompareArguments(MochaDB.MochaScript.MochaScriptComparisonMark,System.Object,System.Object,System.Int32)">
            <summary>
            Compare arguments by compare mark.
            </summary>
            <param name="mark">Compare mark.</param>
            <param name="arg1">Argument 1.</param>
            <param name="arg2">Argument 2.</param>
            <param name="dex">Index of line.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.GetArgumentValue(System.String,System.String,System.Int32)">
            <summary>
            Get value by argument type.
            </summary>
            <param name="type">Variable data type.</param>
            <param name="arg">Argument.</param>
            <param name="index">Index of line.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.GetCompareMark(System.String)">
            <summary>
            Find mark task.
            </summary>
            <param name="mark">Compare mark.</param>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.GetFunctions">
            <summary>
            Get all functions in code.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.GetCompilerEvents">
            <summary>
            Get all compiler events in code.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.DebugRun">
            <summary>
            Debug code and run.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptDebugger.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaScript.MochaScriptDebugger.MochaScript"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.MochaScriptDebugger.MochaScript">
            <summary>
            MochaScript codes.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.MochaScriptDebugger.MochaScriptArray">
            <summary>
            MochaScript codes as lines.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.MochaScriptDebugger.ScriptPath">
            <summary>
            Path of MochaScrip file.
            </summary>
        </member>
        <member name="T:MochaDB.MochaScript.MochaScriptComparisonMark">
            <summary>
            Comparison mark for MochaScript.
            </summary>
        </member>
        <member name="F:MochaDB.MochaScript.MochaScriptComparisonMark.Equal">
            <summary>
            '==' operator.
            </summary>
        </member>
        <member name="F:MochaDB.MochaScript.MochaScriptComparisonMark.NotEqual">
            <summary>
            '!=' operator.
            </summary>
        </member>
        <member name="F:MochaDB.MochaScript.MochaScriptComparisonMark.Bigger">
            <summary>
            '>' operator.
            </summary>
        </member>
        <!-- Kötü biçimli XML yorumu "F:MochaDB.MochaScript.MochaScriptComparisonMark.Smaller" üyesi için yoksayıldı -->
        <member name="F:MochaDB.MochaScript.MochaScriptComparisonMark.EqualBigger">
            <summary>
            '>=' operator.
            </summary>
        </member>
        <!-- Kötü biçimli XML yorumu "F:MochaDB.MochaScript.MochaScriptComparisonMark.EqualSmaller" üyesi için yoksayıldı -->
        <member name="F:MochaDB.MochaScript.MochaScriptComparisonMark.Undefined">
            <summary>
            Undefined operator.
            </summary>
        </member>
        <member name="T:MochaDB.MochaScript.MochaScriptEchoEventArgs">
            <summary>
            Echo event arguments for echo events.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.MochaScriptEchoEventArgs.#ctor(System.Object)">
            <summary>
            Create new MochaScriptEchoEventArgs.
            </summary>
            <param name="message">Echo message.</param>
        </member>
        <member name="P:MochaDB.MochaScript.MochaScriptEchoEventArgs.Message">
            <summary>
            Echo message.
            </summary>
        </member>
        <member name="T:MochaDB.MochaScript.keywords.MochaScriptVariableCollection">
            <summary>
            Collectioner for MochaScript variables.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.#ctor">
            <summary> 
            Create new MochaScriptVariableCollection.
            </summary>
            <param name="debugger">Based debugger.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.#ctor(System.Collections.Generic.IEnumerable{MochaDB.MochaScript.keywords.MochaScriptVariable})">
            <summary> 
            Create new MochaScriptVariableCollection.
            </summary>
            <param name="variables">To be variables.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Clear">
            <summary>
            Remove all variables.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Add(MochaDB.MochaScript.keywords.MochaScriptVariable)">
            <summary>
            Add variable.
            </summary>
            <param name="variable">To be added variable.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.AddRange(System.Collections.Generic.IEnumerable{MochaDB.MochaScript.keywords.MochaScriptVariable})">
            <summary>
            Add varaible from collection.
            </summary>
            <param name="variables">To be added variables.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Remove(System.String)">
            <summary>
            Remove variable by name.
            </summary>
            <param name="name">Name of variable to remove.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Remove(System.Int32)">
            <summary>
            Remove variable by index.
            </summary>
            <param name="name">Index of variable to remove.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.IndexOf(System.String)">
            <summary>
            Return index from name. Return index if defined name but return -1 if not defined name.
            </summary>
            <param name="name">Name of variable.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Contains(System.String)">
            <summary>
            Exists variable.
            </summary>
            <param name="name">Name of variable.</param>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Item(System.Int32)">
            <summary>
            Get variable in index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Variables">
            <summary>
            All functions as array.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptVariableCollection.Count">
            <summary>
            Get function count.
            </summary>
        </member>
        <member name="T:MochaDB.MochaScript.keywords.MochaScriptVariable">
            <summary>
            This is the variable delegate object for MochaScript.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariable.#ctor(System.String,System.String)">
            <summary>
            Create new MochaScriptVariable.
            </summary>
            <param name="name">Name of variable.</param>
            <param name="type">Value type of variable.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptVariable.#ctor(System.String,System.String,System.Object)">
            <summary>
            Create new MochaScriptFunction.
            </summary>
            <param name="name">Name of variable.</param>
            <param name="type">Value type of variable.</param>
            <param name="value">Value of varaible.</param>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptVariable.Name">
            <summary>
            Name of variable.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptVariable.ValueType">
            <summary>
            Value type of variable.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptVariable.Value">
            <summary>
            Value of variable.
            </summary>
        </member>
        <member name="T:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection">
            <summary>
            Collectioner for MochaScript Functions.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.#ctor(MochaDB.MochaScript.MochaScriptDebugger)">
            <summary> 
            Create new MochaScriptFunctionCollection.
            </summary>
            <param name="debugger">Based debugger.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.#ctor(MochaDB.MochaScript.MochaScriptDebugger,System.Collections.Generic.IEnumerable{MochaDB.MochaScript.keywords.MochaScriptFunction})">
            <summary> 
            Create new MochaScriptFunctionCollection.
            </summary>
            <param name="functions">To be functions.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Clear">
            <summary>
            Remove all functions.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Add(MochaDB.MochaScript.keywords.MochaScriptFunction)">
            <summary>
            Add function.
            </summary>
            <param name="function">To be added function.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.AddRange(System.Collections.Generic.IEnumerable{MochaDB.MochaScript.keywords.MochaScriptFunction})">
            <summary>
            Add functions from collection.
            </summary>
            <param name="functions">To be added functions.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.IndexOf(System.String)">
            <summary>
            Return index from name. Return index if defined name but return -1 if not defined name.
            </summary>
            <param name="name">Name of function.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Contains(System.String)">
            <summary>
            Exists function.
            </summary>
            <param name="name">Name of function.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Invoke(System.String)">
            <summary>
            Invoke function from name.
            </summary>
            <param name="name">Name of function.</param>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Debugger">
            <summary>
            Based debugger.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Item(System.Int32)">
            <summary>
            Get function in index.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Functions">
            <summary>
            All functions as array.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptFunctionCollection.Count">
            <summary>
            Get function count.
            </summary>
        </member>
        <member name="T:MochaDB.MochaScript.keywords.MochaScriptFunction">
            <summary>
            This is the function delegate object for MochaScript.
            </summary>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunction.#ctor(System.String)">
            <summary>
            Create new MochaScriptFunction.
            </summary>
            <param name="name">Name of function.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunction.#ctor(System.String,System.String[])">
            <summary>
            Create new MochaScriptFunction.
            </summary>
            <param name="name">Name of function.</param>
            <param name="content">MochaScript codes in fuction as lines.</param>
        </member>
        <member name="M:MochaDB.MochaScript.keywords.MochaScriptFunction.#ctor(System.String,System.String[],System.Int32)">
            <summary>
            Create new MochaScriptFunction.
            </summary>
            <param name="name">Name of function.</param>
            <param name="content">MochaScript codes in fuction as lines.</param>
            <param name="index">This function index in code.</param>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptFunction.Name">
            <summary>
            Name of function.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptFunction.Source">
            <summary>
            Function MochaScript codes as lines.
            </summary>
        </member>
        <member name="P:MochaDB.MochaScript.keywords.MochaScriptFunction.Index">
            <summary>
            Function index in code.
            </summary>
        </member>
        <member name="T:MochaDB.MochaSector">
            <summary>
            This is sector object for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaSector.#ctor(System.String)">
            <summary>
            Create new MochaSector.
            </summary>
            <param name="name">Name of sector.</param>
        </member>
        <member name="M:MochaDB.MochaSector.#ctor(System.String,System.String)">
            <summary>
            Create new MochaSector.
            </summary>
            <param name="name">Name of sector.</param>
            <param name="data">Data value.</param>
        </member>
        <member name="M:MochaDB.MochaSector.#ctor(System.String,System.String,System.String)">
            <summary>
            Create new MochaSector.
            </summary>
            <param name="name">Name of sector.</param>
            <param name="data">Data value.</param>
            <param name="description">Description of sector.</param>
        </member>
        <member name="E:MochaDB.MochaSector.NameChanged">
            <summary>
            This happens after name changed;
            </summary>
        </member>
        <member name="M:MochaDB.MochaSector.ToElement">
            <summary>
            Returns MochaSector converted to MochaElement.
            </summary>
        </member>
        <member name="M:MochaDB.MochaSector.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaSector.Data"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaSector.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:MochaDB.MochaSector.Data">
            <summary>
            Data.
            </summary>
        </member>
        <member name="P:MochaDB.MochaSector.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="T:MochaDB.MochaSectorCollection">
            <summary>
            MochaSector collector.
            </summary>
        </member>
        <member name="M:MochaDB.MochaSectorCollection.#ctor">
            <summary>
            Create a new MochaSectorCollection.
            </summary>
        </member>
        <member name="E:MochaDB.MochaSectorCollection.SectorNameChanged">
            <summary>
            This happens after NameChanged event of any item in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaSectorCollection.Remove(System.String)">
            <summary>
            Remove item by name.
            </summary>
            <param name="name">Name of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaSectorCollection.IndexOf(System.String)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="name">Name of item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaSectorCollection.Contains(System.String)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="name">Name of item to exists check.</param>
        </member>
        <member name="P:MochaDB.MochaSectorCollection.Item(System.Int32)">
            <summary>
            Return item by index.
            </summary>
            <param name="index">Index of item.</param>
        </member>
        <member name="P:MochaDB.MochaSectorCollection.Item(System.String)">
            <summary>
            Return item by name.
            </summary>
            <param name="name">Name of item.</param>
        </member>
        <member name="T:MochaDB.MochaStack">
            <summary>
            This is stack object for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStack.#ctor(System.String)">
            <summary>
            Create new MochaStack.
            </summary>
            <param name="name">Name of stack.</param>
        </member>
        <member name="M:MochaDB.MochaStack.#ctor(System.String,System.String)">
            <summary>
            Create new MochaStack.
            </summary>
            <param name="name">Name of stack.</param>
            <param name="description">Description of stack.</param>
        </member>
        <member name="E:MochaDB.MochaStack.NameChanged">
            <summary>
            This happens after name changed;
            </summary>
        </member>
        <member name="M:MochaDB.MochaStack.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaStack.Name"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaStack.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:MochaDB.MochaStack.Description">
            <summary>
            Description of stack.
            </summary>
        </member>
        <member name="P:MochaDB.MochaStack.Items">
            <summary>
            Items of stack.
            </summary>
        </member>
        <member name="T:MochaDB.MochaStackCollection">
            <summary>
            MochaStack collector.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStackCollection.#ctor">
            <summary>
            Create a new MochaStackCollection.
            </summary>
        </member>
        <member name="E:MochaDB.MochaStackCollection.StackNameChanged">
            <summary>
            This happens after NameChanged event of any item in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStackCollection.Remove(System.String)">
            <summary>
            Remove item by name.
            </summary>
            <param name="name">Name of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaStackCollection.IndexOf(System.String)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="name">Name of item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaStackCollection.Contains(System.String)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="name">Name of item to exists check.</param>
        </member>
        <member name="P:MochaDB.MochaStackCollection.Item(System.Int32)">
            <summary>
            Return item by index.
            </summary>
            <param name="index">Index of item.</param>
        </member>
        <member name="P:MochaDB.MochaStackCollection.Item(System.String)">
            <summary>
            Return item by name.
            </summary>
            <param name="name">Name of item.</param>
        </member>
        <member name="T:MochaDB.MochaStackItem">
            <summary>
            Item for stacks.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStackItem.#ctor(System.String)">
            <summary>
            Create new MochaStackItem.
            </summary>
            <param name="name">Name of item.</param>
        </member>
        <member name="M:MochaDB.MochaStackItem.#ctor(System.String,System.String)">
            <summary>
            Create new MochaStackItem.
            </summary>
            <param name="name">Name of item.</param>
            <param name="description">Description of item.</param>
        </member>
        <member name="M:MochaDB.MochaStackItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Create new MochaStackItem.
            </summary>
            <param name="name">Name of item.</param>
            <param name="description">Description of item.</param>
            <param name="value">Value of item.</param>
        </member>
        <member name="E:MochaDB.MochaStackItem.NameChanged">
            <summary>
            This happens before name changed.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStackItem.ToElement">
            <summary>
            Returns MochaSector converted to MochaElement.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStackItem.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaStackItem.Value"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaStackItem.Name">
            <summary>
            Name of item.
            </summary>
        </member>
        <member name="P:MochaDB.MochaStackItem.Value">
            <summary>
            Value of item.
            </summary>
        </member>
        <member name="P:MochaDB.MochaStackItem.Description">
            <summary>
            Description of item.
            </summary>
        </member>
        <member name="P:MochaDB.MochaStackItem.Items">
            <summary>
            Items of item.
            </summary>
        </member>
        <member name="T:MochaDB.MochaStackItemCollection">
            <summary>
            MochaStackItem collector.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStackItemCollection.#ctor">
            <summary>
            Create new MochaStackItemCollection.
            </summary>
        </member>
        <member name="E:MochaDB.MochaStackItemCollection.StackItemNameChanged">
            <summary>
            This happens after NameChanged event of any item in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaStackItemCollection.Remove(System.String)">
            <summary>
            Remove item by name.
            </summary>
            <param name="name">Name of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaStackItemCollection.IndexOf(System.String)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="name">Name of item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaStackItemCollection.Contains(System.String)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="name">Name of item to exists check.</param>
        </member>
        <member name="P:MochaDB.MochaStackItemCollection.Item(System.Int32)">
            <summary>
            Return item by index.
            </summary>
            <param name="index">Index of item.</param>
        </member>
        <member name="P:MochaDB.MochaStackItemCollection.Item(System.String)">
            <summary>
            Return item by name.
            </summary>
            <param name="name">Name of item.</param>
        </member>
        <member name="T:MochaDB.MochaTable">
            <summary>
            This is table object for MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.MochaTable.#ctor(System.String)">
            <summary>
            Create new MochaTable.
            </summary>
            <param name="name">Name of table.</param>
        </member>
        <member name="M:MochaDB.MochaTable.#ctor(System.String,System.String)">
            <summary>
            Create new MochaTable.
            </summary>
            <param name="name">Name of table.</param>
            <param name="description">Description of table.</param>
        </member>
        <member name="E:MochaDB.MochaTable.NameChanged">
            <summary>
            This happens after name changed;
            </summary>
        </member>
        <member name="M:MochaDB.MochaTable.SetDatasByRows">
            <summary>
            Set datas by row datas.
            </summary>
        </member>
        <member name="M:MochaDB.MochaTable.SetRowsByDatas">
            <summary>
            Set rows by column datas.
            </summary>
        </member>
        <member name="M:MochaDB.MochaTable.ShortDatas(System.Int32)">
            <summary>
            Short datas.
            </summary>
            <param name="index">Index of column.</param>
        </member>
        <member name="M:MochaDB.MochaTable.ShortColumns">
            <summary>
            Sort columns by name.
            </summary>
        </member>
        <member name="M:MochaDB.MochaTable.IsEmpty">
            <summary>
            Returns table empty state.
            </summary>
        </member>
        <member name="M:MochaDB.MochaTable.ToString">
            <summary>
            Returns <see cref="P:MochaDB.MochaTable.Name"/>.
            </summary>
        </member>
        <member name="P:MochaDB.MochaTable.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:MochaDB.MochaTable.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:MochaDB.MochaTable.Columns">
            <summary>
            Columns of table.
            </summary>
        </member>
        <member name="P:MochaDB.MochaTable.Rows">
            <summary>
            Rows of table.
            </summary>
        </member>
        <member name="T:MochaDB.MochaTableCollection">
            <summary>
            MochaTable collector.
            </summary>
        </member>
        <member name="M:MochaDB.MochaTableCollection.#ctor">
            <summary>
            Create a new MochaTableCollection.
            </summary>
        </member>
        <member name="E:MochaDB.MochaTableCollection.TableNameChanged">
            <summary>
            This happens after NameChanged event of any item in collection.
            </summary>
        </member>
        <member name="M:MochaDB.MochaTableCollection.Remove(System.String)">
            <summary>
            Remove item by name.
            </summary>
            <param name="name">Name of item to remove.</param>
        </member>
        <member name="M:MochaDB.MochaTableCollection.IndexOf(System.String)">
            <summary>
            Return index if index is find but return -1 if index is not find.
            </summary>
            <param name="name">Name of item to find index.</param>
        </member>
        <member name="M:MochaDB.MochaTableCollection.Contains(System.String)">
            <summary>
            Return true if item is exists but return false if item not exists.
            </summary>
            <param name="name">Name of item to exists check.</param>
        </member>
        <member name="P:MochaDB.MochaTableCollection.Item(System.Int32)">
            <summary>
            Return item by index.
            </summary>
            <param name="index">Index of item.</param>
        </member>
        <member name="P:MochaDB.MochaTableCollection.Item(System.String)">
            <summary>
            Return item by name.
            </summary>
            <param name="name">Name of item.</param>
        </member>
        <member name="T:MochaDB.Querying.IMochaResult">
            <summary>
            Interface for MochaDB results.
            </summary>
        </member>
        <member name="T:MochaDB.Querying.IMochaResult`1">
            <summary>
            Iterface for MochaDB value results.
            </summary>
            <typeparam name="T">Value type.</typeparam>
        </member>
        <member name="T:MochaDB.Querying.QueryingMochaArray">
            <summary>
            Query extension for MochaArrays.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaArray.Select``1(MochaDB.MochaArray{``0},System.Func{``0,``0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaArray.Select``1(MochaDB.MochaArray{``0},System.Func{``0,System.Int32,``0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaArray.Where``1(MochaDB.MochaArray{``0},System.Func{``0,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaArray.Where``1(MochaDB.MochaArray{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaArray.OrderByDescending``1(MochaDB.MochaArray{``0},System.Func{``0,``0})">
            <summary>
            Order items descending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaArray.OrderBy``1(MochaDB.MochaArray{``0},System.Func{``0,``0})">
            <summary>
            Order items ascending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaArray.GroupBy``1(MochaDB.MochaArray{``0},System.Func{``0,``0})">
            <summary>
            Group items by query.
            </summary>
            <param name="query">Query to use in grouping.</param>
        </member>
        <member name="T:MochaDB.Querying.QueryingMochaCollection">
            <summary>
            Query extension for MochaCollections.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaCollection.Select``1(MochaDB.MochaCollection{``0},System.Func{``0,``0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaCollection.Select``1(MochaDB.MochaCollection{``0},System.Func{``0,System.Int32,``0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaCollection.Where``1(MochaDB.MochaCollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaCollection.Where``1(MochaDB.MochaCollection{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaCollection.OrderByDescending``1(MochaDB.MochaCollection{``0},System.Func{``0,``0})">
            <summary>
            Order items descending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaCollection.OrderBy``1(MochaDB.MochaCollection{``0},System.Func{``0,``0})">
            <summary>
            Order items ascending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaCollection.GroupBy``1(MochaDB.MochaCollection{``0},System.Func{``0,``0})">
            <summary>
            Group items by query.
            </summary>
            <param name="query">Query to use in grouping.</param>
        </member>
        <member name="T:MochaDB.Querying.MochaCollectionResult`1">
            <summary>
            Base for MochaDB collection results.
            </summary>
            <typeparam name="T">Type of result value.</typeparam>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.#ctor">
            <summary>
            Create new MochaCollectionResult.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create new MochaCollectionResult.
            </summary>
            <param name="collection">Items.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.Select(System.Func{`0,`0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.Select(System.Func{`0,System.Int32,`0})">
            <summary>
            Select items by query.
            </summary>
            <param name="query">Query to use in filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.Where(System.Func{`0,System.Int32,System.Boolean})">
            <summary>
            Select items by condition.
            </summary>
            <param name="query">Query to use in conditioning.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.OrderByDescending(System.Func{`0,`0})">
            <summary>
            Order items descending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.OrderBy(System.Func{`0,`0})">
            <summary>
            Order items ascending by query.
            </summary>
            <param name="query">Query to use in ordering.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.GroupBy(System.Func{`0,`0})">
            <summary>
            Group items by query.
            </summary>
            <param name="query">Query to use in grouping.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.GetFirst">
            <summary>
            Return first element in collection.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.MochaCollectionResult`1.GetLast">
            <summary>
            Return last element in collection.
            </summary>
        </member>
        <member name="P:MochaDB.Querying.MochaCollectionResult`1.IsCollectionResult">
            <summary>
            This is collection result.
            </summary>
        </member>
        <member name="T:MochaDB.Querying.QueryingMochaDatabase">
            <summary>
            Query extension for MochaDatabases.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ExecuteReader(MochaDB.MochaDatabase,System.String)">
            <summary>
            Execute <see cref="M:MochaDB.Mhql.MochaDbCommand.ExecuteReader"/> function.
            </summary>
            <param name="db">Target database.</param>
            <param name="mhql">MHQL Command.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ExecuteScalar(MochaDB.MochaDatabase,System.String)">
            <summary>
            Execute <see cref="M:MochaDB.Mhql.MochaDbCommand.ExecuteScalar"/> function.
            </summary>
            <param name="db">Target database.</param>
            <param name="mhql">MHQL Command.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ExecuteScalarTable(MochaDB.MochaDatabase,System.String)">
            <summary>
            Execute <see cref="M:MochaDB.Mhql.MochaDbCommand.ExecuteScalarTable"/> function.
            </summary>
            <param name="db">Target database.</param>
            <param name="mhql">MHQL Command.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.GetSectors(MochaDB.MochaDatabase,System.Func{MochaDB.MochaSector,System.Boolean})">
            <summary>
            Returns all sectors in database.
            </summary>
            <param name="db">Target database.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadSectors(MochaDB.MochaDatabase)">
            <summary>
            Read all sectors in database.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadSectors(MochaDB.MochaDatabase,System.Func{MochaDB.MochaSector,System.Boolean})">
            <summary>
            Read all sectors in database.
            </summary>
            <param name="db">Target database.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.GetStacks(MochaDB.MochaDatabase,System.Func{MochaDB.MochaStack,System.Boolean})">
            <summary>
            Returns all stacks in database.
            </summary>
            <param name="db">Target database.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadStacks(MochaDB.MochaDatabase)">
            <summary>
            Read all stacks in database.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadStacks(MochaDB.MochaDatabase,System.Func{MochaDB.MochaStack,System.Boolean})">
            <summary>
            Read all stacks in database.
            </summary>
            <param name="db">Target database.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.GetTables(MochaDB.MochaDatabase,System.Func{MochaDB.MochaTable,System.Boolean})">
            <summary>
            Returns all tables in database.
            </summary>
            <param name="db">Target database.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadTables(MochaDB.MochaDatabase)">
            <summary>
            Read all tables in database.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadTables(MochaDB.MochaDatabase,System.Func{MochaDB.MochaTable,System.Boolean})">
            <summary>
            Read all tables in database.
            </summary>
            <param name="db">Target database.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.GetColumns(MochaDB.MochaDatabase,System.String,System.Func{MochaDB.MochaColumn,System.Boolean})">
            <summary>
            Returns all columns in table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadColumns(MochaDB.MochaDatabase,System.String)">
            <summary>
            Read all columns in table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadColumns(MochaDB.MochaDatabase,System.String,System.Func{MochaDB.MochaColumn,System.Boolean})">
            <summary>
            Read all columns in table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.GetRows(MochaDB.MochaDatabase,System.String,System.Func{MochaDB.MochaRow,System.Boolean})">
            <summary>
            Returns all rows in table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadRows(MochaDB.MochaDatabase,System.String)">
            <summary>
            Read all rows in table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadRows(MochaDB.MochaDatabase,System.String,System.Func{MochaDB.MochaRow,System.Boolean})">
            <summary>
            Read all rows in table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.GetDatas(MochaDB.MochaDatabase,System.String,System.String,System.Func{MochaDB.MochaData,System.Boolean})">
            <summary>
            Returns all datas in column in table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadDatas(MochaDB.MochaDatabase,System.String,System.String)">
            <summary>
            Read all datas in column int table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadDatas(MochaDB.MochaDatabase,System.String,System.String,System.Func{MochaDB.MochaData,System.Boolean})">
            <summary>
            Read all datas in column int table by name.
            </summary>
            <param name="db">Target database.</param>
            <param name="tableName">Name of table.</param>
            <param name="columnName">Name of column.</param>
            <param name="query">Query for filtering.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.GetElements(MochaDB.MochaDatabase,MochaDB.MochaPath,System.Func{MochaDB.MochaElement,System.Boolean})">
            <summary>
            Returns sub elements of element in path.
            </summary>
            <param name="db">Target database.</param>
            <param name="path">Path of base element.</param>
            <param name="query">Path of base element.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingMochaDatabase.ReadColumnAttributes(MochaDB.MochaDatabase,MochaDB.MochaPath,System.Func{MochaDB.MochaElement,System.Boolean})">
            <summary>
            Read all sub elements of element in path.
            </summary>
            <param name="db">Target database.</param>
            <param name="path">Path of base element.</param>
            <param name="query">Path of base element.</param>
        </member>
        <member name="T:MochaDB.Querying.MochaResult`1">
            <summary>
            Base for MochaDB value results.
            </summary>
            <typeparam name="T">Type of result value.</typeparam>
        </member>
        <member name="M:MochaDB.Querying.MochaResult`1.#ctor(`0)">
            <summary>
            Create new MochaResult.
            </summary>
            <param name="value">Result value.</param>
        </member>
        <member name="M:MochaDB.Querying.MochaResult`1.GetObject">
            <summary>
            Returns value as object.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.MochaResult`1.GetString">
            <summary>
            Return 
            </summary>
        </member>
        <member name="M:MochaDB.Querying.MochaResult`1.GetHash">
            <summary>
            Return hash code of value.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.MochaResult`1.ToString">
            <summary>
            Returns result of <see cref="M:MochaDB.Querying.MochaResult`1.GetString"/>.
            </summary>
        </member>
        <member name="P:MochaDB.Querying.MochaResult`1.Value">
            <summary>
            Result value.
            </summary>
        </member>
        <member name="P:MochaDB.Querying.MochaResult`1.IsCollectionResult">
            <summary>
            This is collection result.
            </summary>
        </member>
        <member name="T:MochaDB.Querying.QueryingString">
            <summary>
            Strings.
            </summary>
        </member>
        <member name="M:MochaDB.Querying.QueryingString.FirstChar(System.String)">
            <summary>
            Returns first char.
            </summary>
            <param name="value">String.</param>
        </member>
        <member name="M:MochaDB.Querying.QueryingString.LastChar(System.String)">
            <summary>
            Returns last char.
            </summary>
            <param name="value">String.</param>
        </member>
        <member name="T:MochaDB.Streams.MochaReader`1">
            <summary>
            Stream reader for MochaDB.
            </summary>
            <typeparam name="T">Value type of stream reader.</typeparam>
        </member>
        <member name="M:MochaDB.Streams.MochaReader`1.#ctor(`0[])">
            <summary>
            Create a new MochaReader.
            </summary>
            <param name="values">Values of stream.</param>
        </member>
        <member name="M:MochaDB.Streams.MochaReader`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new MochaReader.
            </summary>
            <param name="values">Values of stream.</param>
        </member>
        <member name="M:MochaDB.Streams.MochaReader`1.Read">
            <summary>
            Returns true if value is exists in next position but returns if not.
            </summary>
        </member>
        <member name="M:MochaDB.Streams.MochaReader`1.GoBack">
            <summary>
            Go to previous position.
            </summary>
        </member>
        <member name="M:MochaDB.Streams.MochaReader`1.GoFirst">
            <summary>
            Go to first position.
            </summary>
        </member>
        <member name="M:MochaDB.Streams.MochaReader`1.GoLast">
            <summary>
            Go to last position.
            </summary>
        </member>
        <member name="M:MochaDB.Streams.MochaReader`1.ToString">
            <summary>
            Returns converted to string result of <see cref="P:MochaDB.Streams.MochaReader`1.Value"/>.
            </summary>
        </member>
        <member name="P:MochaDB.Streams.MochaReader`1.Value">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="P:MochaDB.Streams.MochaReader`1.Position">
            <summary>
            Current value index of reader.
            </summary>
        </member>
        <member name="P:MochaDB.Streams.MochaReader`1.Count">
            <summary>
            Count of value.
            </summary>
        </member>
        <member name="T:MochaDB.framework.Framework_DICTIONARY">
            <summary>
            Dictionary framework of MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.framework.Framework_DICTIONARY.FromArray(System.String[0:,0:])">
            <summary>
            Dictionary from array.
            </summary>
            <param name="array">Source array.</param>
        </member>
        <member name="M:MochaDB.framework.Framework_DICTIONARY.MatchKey``2(System.Collections.Generic.Dictionary{``0,``1},System.String)">
            <summary>
            Return true if contains matched key, returns false if not.
            </summary>
            <typeparam name="T1">Type 1.</typeparam>
            <typeparam name="T2">Type 2.</typeparam>
            <param name="dict">Dictionary to find.</param>
            <param name="key">Key.</param>
        </member>
        <member name="M:MochaDB.framework.Framework_DICTIONARY.GetValueByMatchKey``2(System.Collections.Generic.Dictionary{``0,``1},System.String)">
            <summary>
            Return value if contains matched key, returns null if not.
            </summary>
            <typeparam name="T1">Type 1.</typeparam>
            <typeparam name="T2">Type 2.</typeparam>
            <param name="dict">Dictionary to find.</param>
            <param name="key">Key.</param>
        </member>
        <member name="T:MochaDB.framework.Framework_XML">
            <summary>
            XML framework of MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.framework.Framework_XML.GetXElement(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Return element by path.
            </summary>
            <param name="doc">Base XDocument.</param>
            <param name="path">Path of element.</param>
        </member>
        <member name="M:MochaDB.framework.Framework_XML.ExistsElement(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Checks for the presence of the element.
            </summary>
            <param name="doc">Base XDocument.</param>
            <param name="path">Path of element.</param>
        </member>
        <member name="T:MochaDB.framework.aes">
            <summary>
            AES encryptor of MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.framework.aes.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypt content.
            </summary>
            <param name="iv">IV.</param>
            <param name="key">Key.</param>
            <param name="content">Content.</param>
        </member>
        <member name="M:MochaDB.framework.aes.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypt.
            </summary>
            <param name="iv">IV.</param>
            <param name="key">Key.</param>
            <param name="content">Content.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_USE">
            <summary>
            MHQL USE keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_USE.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create a new Mhql_USE.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_USE.GetUSE(System.String@)">
            <summary>
            Returns use command.
            </summary>
            <param name="final">Command of removed use commands.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_USE.GetTable(System.String,System.Boolean)">
            <summary>
            Returns table by use command.
            </summary>
            <param name="usecommand">Use command.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_USE.GetSector(System.String,System.Boolean)">
            <summary>
            Returns sector table by use command.
            </summary>
            <param name="usecommand">Use command.</param>
        </member>
        <member name="T:MochaDB.mhql.IMhqlKeyword">
            <summary>
            Interface for Mhql keywords.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.IMhqlKeyword.Tdb">
            <summary>
            Target database.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.IMhqlKeyword.Command">
            <summary>
            MHQL Command.
            </summary>
        </member>
        <member name="T:MochaDB.mhql.MhqlKeyword">
            <summary>
            Base class for Mhql keywords.
            </summary>
        </member>
        <member name="T:MochaDB.mhql.Mhql_ORDERBY">
            <summary>
            MHQL ORDERBY keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_ORDERBY.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create a new Mhql_ORDERBY.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_ORDERBY.IsORDERBY(System.String)">
            <summary>
            Returns true if command is ORDERBY command, returns if not.
            </summary>
            <param name="command">Command to check.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_ORDERBY.GetORDERBY(System.String,System.String@)">
            <summary>
            Returns orderby command.
            </summary>
            <param name="command">MHQL Command.</param>
            <param name="final">Command of removed orderby commands.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_ORDERBY.OrderBy(System.String,MochaDB.Mhql.MochaTableResult@,System.Boolean)">
            <summary>
            Orderby by command.
            </summary>
            <param name="command">Orderby command.</param>
            <param name="table">Table to ordering.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.MHQLOrderType">
            <summary>
            Ordering types of MHQL.
            </summary>
        </member>
        <member name="F:MochaDB.mhql.MHQLOrderType.ASC">
            <summary>
            Ascending.
            </summary>
        </member>
        <member name="F:MochaDB.mhql.MHQLOrderType.DESC">
            <summary>
            Descending.
            </summary>
        </member>
        <member name="T:MochaDB.mhql.Mhql_GROUPBY">
            <summary>
            MHQL GROUPBY keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_GROUPBY.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create a new Mhql_GROUPBY.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_GROUPBY.IsGROUPBY(System.String)">
            <summary>
            Returns true if command is GROUPBY command, returns if not.
            </summary>
            <param name="command">Command to check.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_GROUPBY.GetGROUPBY(System.String,System.String@)">
            <summary>
            Returns groupby command.
            </summary>
            <param name="command">MHQL Command.</param>
            <param name="final">Command of removed groupby commands.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_GROUPBY.GroupBy(System.String,MochaDB.Mhql.MochaTableResult@,System.Boolean)">
            <summary>
            Groupby by command.
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table to grouping.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_MUST">
            <summary>
            MHQL ORDERBY must.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_MUST.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create a new Mhql_MUST.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_MUST.IsMUST(System.String)">
            <summary>
            Returns true if command is MUST command, returns if not.
            </summary>
            <param name="command">Command to check.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_MUST.GetMUST(System.String,System.String@)">
            <summary>
            Returns must command.
            </summary>
            <param name="command">MHQL Command.</param>
            <param name="final">Command of removed must commands.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_MUST.MustTable(System.String,MochaDB.Mhql.MochaTableResult@,System.Boolean)">
            <summary>
            Must by tables.
            </summary>
            <param name="command">Must command.</param>
            <param name="table">Table.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_AS">
            <summary>
            MHQL AS keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_AS.GetAS(System.String@)">
            <summary>
            Returns as name.
            </summary>
            <param name="command">Command</param>
            <param name="final">As removed command.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_AT">
            <summary>
            MHQL @ mark.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_AT.GetAT(System.String,System.String@)">
            <summary>
            Returns tag from command.
            </summary>
            <param name="command">Command.</param>
            <param name="final">Command of removed tag.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_AT.GetATS(System.String,System.String@)">
            <summary>
            Returns tags from command.
            </summary>
            <param name="command">Command.</param>
            <param name="final">Command of removed tags.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_SELECT">
            <summary>
            MHQL SELECT keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SELECT.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create a new Mhql_SELECT.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SELECT.GetSELECT(System.String@)">
            <summary>
            Returns select command.
            </summary>
            <param name="final">Command of removed select commands.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SELECT.GetTables(System.String)">
            <summary>
            Returns tables by select command.
            </summary>
            <param name="selectcommand">Select command.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SELECT.GetSectors(System.String)">
            <summary>
            Returns sectors by select command.
            </summary>
            <param name="selectcommand">Select command.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SELECT.GetStacks(System.String)">
            <summary>
            Returns stacks by select command.
            </summary>
            <param name="selectcommand">Select command.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_REMOVE">
            <summary>
            MHQL REMOVE keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_REMOVE.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Create a new Mhql_REMOVE.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_REMOVE.IsRemoveCmd">
            <summary>
            Returns true if command is remove, return false if not.
            </summary>
        </member>
        <member name="T:MochaDB.mhql.Mhql_GRAMMAR">
            <summary>
            Grammar of MHQL.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_GRAMMAR.GetIndexOfColumn(System.String,MochaDB.Mhql.MochaTableResult,System.Boolean)">
            <summary>
            Returns column index.
            </summary>
            <param name="value">Value.</param>
            <param name="table">Table.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_GRAMMAR.GetIndexOfColumn(System.String,MochaDB.Querying.MochaCollectionResult{MochaDB.MochaColumn},System.Boolean)">
            <summary>
            Returns column index.
            </summary>
            <param name="value">Value.</param>
            <param name="cols">Columns.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="P:MochaDB.mhql.Mhql_GRAMMAR.MustFunctions">
            <summary>
            Functions of must.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.Mhql_GRAMMAR.UseFunctions">
            <summary>
            Functions of use.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.Mhql_GRAMMAR.MainKeywords">
            <summary>
            Main keywords.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.Mhql_GRAMMAR.FullRegex">
            <summary>
            All words.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.Mhql_GRAMMAR.MainRegex">
            <summary>
            Main keywrods.
            </summary>
        </member>
        <member name="T:MochaDB.mhql.Mhql_SUBROW">
            <summary>
            MHQL SUBROW keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SUBROW.#ctor(MochaDB.MochaDatabase)">
            <summary>
            Constructor.
            </summary>
            <param name="db">Target database.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SUBROW.IsSUBROW(System.String)">
            <summary>
            Returns true if command is SUBROW command, returns if not.
            </summary>
            <param name="command">Command to check.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SUBROW.GetSUBROW(System.String,System.String@)">
            <summary>
            Returns subrow command.
            </summary>
            <param name="command">MHQL Command.</param>
            <param name="final">Command of removed subrow commands.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_SUBROW.Subrow(System.String,MochaDB.Mhql.MochaTableResult@)">
            <summary>
            Subrow by command.
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table to subrowing.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_FROM">
            <summary>
            MHQL FROM keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_FROM.IsFROM(System.String)">
            <summary>
            Returns true if command is FROM style, returns if not.
            </summary>
            <param name="command">Command to check.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_FROM.GetIndex(System.String@)">
            <summary>
            Returns index of FROM keyword.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="M:MochaDB.mhql.Mhql_FROM.GetSUBROW(System.String,System.String@)">
            <summary>
            Returns subrow command.
            </summary>
            <param name="command">MHQL Command.</param>
            <param name="final">Command of removed subrow commands.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_BETWEEN">
            <summary>
            MHQL BETWEEN function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_BETWEEN.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_BIGGER">
            <summary>
            MHQL BIGGER function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_BIGGER.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_LOWER">
            <summary>
            MHQL LOWER function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_LOWER.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_EQUAL">
            <summary>
            MHQL EQUAL function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_EQUAL.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_STARTW">
            <summary>
            MHQL STARTW function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_STARTW.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_ENDW">
            <summary>
            MHQL ENDW function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_ENDW.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_NOTEQUAL">
            <summary>
            MHQL NOTEQUAL function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_NOTEQUAL.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_CONTAINS">
            <summary>
            MHQL CONTAINS function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_CONTAINS.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_NOTCONTAINS">
            <summary>
            MHQL NOTCONTAINS function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_NOTCONTAINS.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_NOTSTARTW">
            <summary>
            MHQL NOTSTARTW function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_NOTSTARTW.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.must_functions.MhqlMustFunc_NOTENDW">
            <summary>
            MHQL NOTENDW function of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must_functions.MhqlMustFunc_NOTENDW.Pass(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Pass command?
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.Mhql_AND">
            <summary>
            MHQL AND keyword.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.Mhql_AND.GetParts(System.String)">
            <summary>
            Returns seperated commands by or.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="T:MochaDB.mhql.must.MhqlMust_REGEX">
            <summary>
            REGEX functions of MUST.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.must.MhqlMust_REGEX.GetCommand(System.String)">
            <summary>
            Returns Regex command by row.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="M:MochaDB.mhql.must.MhqlMust_REGEX.Match(System.String,System.String)">
            <summary>
            Execute regex and returns result.
            </summary>
            <param name="pattern">Regex pattern.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:MochaDB.mhql.engine.MhqlEng_MUST">
            <summary>
            MHQL MUST core.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_MUST.ProcessPart(System.String@,MochaDB.Mhql.MochaTableResult,System.Boolean)">
            <summary>
            Process mhql query part.
            </summary>
            <param name="value">Query.</param>
            <param name="table">Table.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_MUST.GetDataFromCommand(System.String,MochaDB.MochaRow)">
            <summary>
            Returns data by command.
            </summary>
            <param name="command">Command.</param>
            <param name="row">Base row.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_MUST.IsPassTable(System.String@,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Returns command must result.
            </summary>
            <param name="command">Command.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.engine.MhqlEng_EDITOR">
            <summary>
            MHQL command editor.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_EDITOR.DecomposeBrackets(System.String@)">
            <summary>
            Decompose command ares by brackets.
            </summary>
            <param name="">Command.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_EDITOR.DecomposeBrackets(System.String)">
            <summary>
            Returns decompose command ares by brackets.
            </summary>
            <param name="value">Value to decompose.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_EDITOR.RemoveComments(System.String@)">
            <summary>
            Remove all comments from code.
            </summary>
            <param name="command">Command.</param>
        </member>
        <member name="T:MochaDB.mhql.engine.MhqlEng_CONDITION">
            <summary>
            Condition engine for MHQL.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_CONDITION.Process(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Process condition and returns condition result.
            </summary>
            <param name="command">Condition.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_CONDITION.IsCondition(System.String,MochaDB.mhql.engine.ConditionType@)">
            <summary>
            Returns true if command is condition but returns false if not.
            </summary>
            <param name="command">Command to check.</param>
            <param name="type">Type of condition.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_CONDITION.Process_EQUAL(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Process equal condition and returns result.
            </summary>
            <param name="command">Condition.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_CONDITION.Process_NOTEQUAL(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Process not equal condition and returns result.
            </summary>
            <param name="command">Condition.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_CONDITION.GetConditionParts(System.String,System.String)">
            <summary>
            Returns condition parts.
            </summary>
            <param name="command">Condition.</param>
            <param name="operator">Operator.</param>
        </member>
        <member name="M:MochaDB.mhql.engine.MhqlEng_CONDITION.GetValue(System.String,MochaDB.Mhql.MochaTableResult,MochaDB.MochaRow,System.Boolean)">
            <summary>
            Returns value.
            </summary>
            <param name="value">Value.</param>
            <param name="table">Table.</param>
            <param name="row">Row.</param>
            <param name="from">Use state FROM keyword.</param>
        </member>
        <member name="T:MochaDB.mhql.engine.MhqlEng_CONDITION_LEXER">
            <summary>
            Lexer of MHQL conditions.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.engine.MhqlEng_CONDITION_LEXER.Operators">
            <summary>
            Operators.
            </summary>
        </member>
        <member name="T:MochaDB.mhql.engine.ConditionType">
            <summary>
            Condition type.
            </summary>
        </member>
        <member name="F:MochaDB.mhql.engine.ConditionType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:MochaDB.mhql.engine.ConditionType.EQUAL">
            <summary>
            Euqal operator.
            </summary>
        </member>
        <member name="F:MochaDB.mhql.engine.ConditionType.NOTEQUAL">
            <summary>
            Not equal operator.
            </summary>
        </member>
        <member name="T:MochaDB.mhql.engine.ORDERBYComparer">
            <summary>
            Comparer for mhql orderby.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.engine.ORDERBYComparer.IsNumeric(System.String)">
            <summary>
            Method to determine if a string is a number.
            </summary>
            <param name="value">String to test.</param>
            <returns>True if numeric</returns>
        </member>
        <member name="M:MochaDB.mhql.engine.ORDERBYComparer.Compare(System.String,System.String)">
            <summary>
            Compare values.
            </summary>
            <param name="s1">Value 1.</param>
            <param name="s2">Value 2.</param>
        </member>
        <member name="T:MochaDB.mhql.engine.value.MhqlEngVal_LEXER">
            <summary>
            Lexer of MHQL values.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.engine.value.MhqlEngVal_LEXER.Escapes">
            <summary>
            Escape characters of char.
            </summary>
        </member>
        <member name="P:MochaDB.mhql.engine.value.MhqlEngVal_LEXER.EscapeCheck">
            <summary>
            Check escape characters for escape character processor(s).
            </summary>
        </member>
        <member name="T:MochaDB.mhql.engine.value.MhqlEngVal_CHAR">
            <summary>
            Char value engine of MHQL.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.engine.value.MhqlEngVal_CHAR.Process(System.String@)">
            <summary>
            Process value.
            </summary>
            <param name="val">Value.</param>
        </member>
        <member name="T:MochaDB.mhql.engine.value.MhqlEngVal_STRING">
            <summary>
            Char value engine of MHQL.
            </summary>
        </member>
        <member name="M:MochaDB.mhql.engine.value.MhqlEngVal_STRING.Process(System.String@)">
            <summary>
            Process value.
            </summary>
            <param name="val">Value.</param>
        </member>
        <member name="T:MochaDB.engine.Engine_NAMES">
            <summary>
            Name engine of MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.engine.Engine_NAMES.Check(System.String)">
            <summary>
            Returns true if pass but returns false if not.
            </summary>
        </member>
        <member name="M:MochaDB.engine.Engine_NAMES.CheckThrow(System.String)">
            <summary>
            Check name and give exception if not pass.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:MochaDB.engine.Engine_NAMES.AttributeCheck(System.String)">
            <summary>
            Returns true if pass but returns false if not.
            </summary>
        </member>
        <member name="M:MochaDB.engine.Engine_NAMES.AttributeCheckThrow(System.String)">
            <summary>
            Check name and give exception if not pass.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="T:MochaDB.engine.Engine_VALUES">
            <summary>
            Value engine of MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.engine.Engine_VALUES.PasswordCheck(System.String)">
            <summary>
            Returns true if pass but returns false if not.
            </summary>
        </member>
        <member name="M:MochaDB.engine.Engine_VALUES.PasswordCheckThrow(System.String)">
            <summary>
            Check name and give exception if not pass.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:MochaDB.engine.Engine_VALUES.AttributeCheck(System.String)">
            <summary>
            Returns true if pass but returns false if not.
            </summary>
        </member>
        <member name="M:MochaDB.engine.Engine_VALUES.AttributeCheckThrow(System.String)">
            <summary>
            Check name and give exception if not pass.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="T:MochaDB.engine.Engine_LEXER">
            <summary>
            Lexer of MochaDB.
            </summary>
        </member>
        <member name="P:MochaDB.engine.Engine_LEXER.Extension">
            <summary>
            File extension of MochaDB.
            </summary>
        </member>
        <member name="P:MochaDB.engine.Engine_LEXER.ScriptExtension">
            <summary>
            MochaScript file extension of MochaDB.
            </summary>
        </member>
        <member name="P:MochaDB.engine.Engine_LEXER.Version">
            <summary>
            Version of MochaDB.
            </summary>
        </member>
        <member name="P:MochaDB.engine.Engine_LEXER.EmptyContent">
            <summary>
            The most basic content of the database.
            </summary>
        </member>
        <member name="T:MochaDB.engine.Engine_STRUCTURE">
            <summary>
            Structure engine of MochaDB.
            </summary>
        </member>
        <member name="M:MochaDB.engine.Engine_STRUCTURE.CheckMochaDB(System.Xml.Linq.XDocument)">
            <summary>
            Checks the suitability and robustness of the MochaDB database.
            </summary>
            <param name="doc">XDocument object of database.</param>
        </member>
    </members>
</doc>
