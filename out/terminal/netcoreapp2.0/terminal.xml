<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>terminal</name></assembly>
<members>
<member name="F:terminal.terminal.argsIndex@">
 <summary>
 Last index of start arguments.
 </summary>
</member>
<member name="F:terminal.terminal.argMode@">
 <summary>
 Terminal execute in start arguments only mode.
 </summary>
</member>
<member name="F:terminal.terminal.startArgs@">
 <summary>
 Start arguments of terminal.
 </summary>
</member>
<member name="F:terminal.terminal.version@">
 <summary>
 Version of terminal.
 </summary>
</member>
<member name="F:terminal.terminal.pwd@">
 <summary>
 Working directory.
 </summary>
</member>
<member name="P:terminal.terminal.startArgs(System.String[])">
 <summary>
 Start arguments of terminal.
 </summary>
</member>
<member name="P:terminal.terminal.pwd(System.String)">
 <summary>
 Working directory.
 </summary>
</member>
<member name="P:terminal.terminal.argsIndex(System.Int32)">
 <summary>
 Last index of start arguments.
 </summary>
</member>
<member name="P:terminal.terminal.argMode(System.Boolean)">
 <summary>
 Terminal execute in start arguments only mode.
 </summary>
</member>
<member name="M:terminal.terminal.printnc(System.String,System.ConsoleColor)">
 <summary>
 Print message and new line to screen with color.
 </summary>
 <param name="msg">Message.</param>
 <param name="color">Color of message.</param>
</member>
<member name="M:terminal.terminal.printc(System.String,System.ConsoleColor)">
 <summary>
 Print message to screen with color.
 </summary>
 <param name="msg">Message.</param>
 <param name="color">Color of message.</param>
</member>
<member name="M:terminal.terminal.printError(System.String)">
 <summary>
 Print error message.
 </summary>
 <param name="msg">Message.</param>
</member>
<member name="P:terminal.terminal.version">
 <summary>
 Version of terminal.
 </summary>
</member>
<member name="P:terminal.terminal.startArgs">
 <summary>
 Start arguments of terminal.
 </summary>
</member>
<member name="P:terminal.terminal.pwd">
 <summary>
 Working directory.
 </summary>
</member>
<member name="P:terminal.terminal.argsIndex">
 <summary>
 Last index of start arguments.
 </summary>
</member>
<member name="P:terminal.terminal.argMode">
 <summary>
 Terminal execute in start arguments only mode.
 </summary>
</member>
<member name="M:terminal.terminal.getInput">
 <summary>
 Returns input with pwd.
 </summary>
 <returns>Input.</returns>
</member>
<member name="M:terminal.terminal.getInput(System.String,System.ConsoleColor)">
 <summary>
 Returns input with msg and color.
 </summary>
 <param name="msg">Message.</param>
 <param name="color">Color of message.</param>
 <returns>Input.</returns>
</member>
<member name="M:terminal.terminal.getInput(System.String)">
 <summary>
 Returns input with msg.
 </summary>
 <param name="msg">Message.</param>
 <returns>Input.</returns>
</member>
<member name="T:terminal.terminal">
 <summary>
 Terminal declare.
 </summary>
</member>
<member name="M:utils.mhq.CommandIsRunType(System.String)">
 <summary>
 Command is run type or not?
 </summary>
 <param name="command">Command to check.</param>
 <returns>true if command is run type, false if not.</returns>
</member>
<member name="M:utils.mhq.CommandIsGetRunType(System.String)">
 <summary>
 Command is getrun type or not?
 </summary>
 <param name="command">Command to check.</param>
 <returns>true if command is getrun type, false if not.</returns>
</member>
<member name="T:utils.mhq">
 <summary>
 MochaQ utilities.
 </summary>
</member>
<member name="M:utils.parser.parseTableToXmlString(MochaDB.Mhql.MochaTableResult)">
 <summary>
 Parse MochaTableResult to XmlString.
 </summary>
 <param name="table">Table to parse.</param>
 <returns>Xml code.</returns>
</member>
<member name="M:utils.parser.parseTableToXmlString(MochaDB.MochaTable)">
 <summary>
 Parse MochaTable to XmlString.
 </summary>
 <param name="table">Table to parse.</param>
 <returns>Xml code.</returns>
</member>
<member name="T:utils.parser">
 <summary>
 Parser.
 </summary>
</member>
<member name="M:utils.cli.printTable(MochaDB.Mhql.MochaTableResult)">
 <summary>
 Print MochaTableResult.
 </summary>
 <param name="table">MochaTableResult to print.</param>
</member>
<member name="M:utils.cli.printTable(MochaDB.MochaTable)">
 <summary>
 Print MochaTable.
 </summary>
 <param name="table">MochaTable to print.</param>
</member>
<member name="M:utils.cli.printEnumerable(System.Collections.IEnumerable)">
 <summary>
 Print elements of IEnumerable.
 </summary>
 <param name="enumrable">IEnumerable to print.</param>
</member>
<member name="M:utils.cli.printDictAsTable(System.Collections.Generic.IDictionary{System.String,System.String})">
 <summary>
 Print dictionary as table.
 </summary>
 <param name="dict">Dictionary to print.<param>
</member>
<member name="T:utils.cli">
 <summary>
 CLI module.
 </summary>
</member>
<member name="M:utils.commandProcessor.splitNamespace(System.String)">
 <summary>
 Get namespace of command if exists.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Module name(namespace).</returns>
</member>
<member name="M:utils.commandProcessor.removeNamespace(System.String)">
 <summary>
 Remove namespace from command.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Command without namespace.</returns>
</member>
<member name="M:utils.commandProcessor.removeArguments(System.String)">
 <summary>
 Remove arguments from command.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Command without arguments.</returns>
</member>
<member name="M:utils.commandProcessor.getArguments(System.String)">
 <summary>
 Returns arguments of command.
 </summary>
 <param name="cmd">Command.</param>
 <returns>Arguments.</returns>
</member>
<member name="T:utils.commandProcessor">
 <summary>
 Command processor for commands.
 </summary>
</member>
<member name="M:submodules.connection.mhql.proc(MochaDB.MochaDatabase,System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="db">Database connection.</param>
 <param name="cmd">Command.</param>
</member>
<member name="T:submodules.connection.mhql">
 <summary>
 MHQL module.
 </summary>
</member>
<member name="M:submodules.connection.mhq.proc(MochaDB.MochaDatabase,System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="db">Database connection.</param>
 <param name="cmd">Command.</param>
</member>
<member name="T:submodules.connection.mhq">
 <summary>
 MochaQ module.
 </summary>
</member>
<member name="M:modules.connect.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="T:modules.connect">
 <summary>
 Connection module.
 </summary>
</member>
<member name="M:modules.make.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="M:modules.make.proc(System.String[])">
 <summary>
 Process commands in module.
 </summary>
 <param name="name">Arguments.</param>
</member>
<member name="T:modules.make">
 <summary>
 Create a new MochaDB database.
 </summary>
</member>
<member name="M:modules.ls.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="T:modules.ls">
 <summary>
 List directory.
 </summary>
</member>
<member name="M:modules.cd.proc(System.String)">
 <summary>
 Process command in module.
 </summary>
 <param name="cmd">Command.</param>
</member>
<member name="T:modules.cd">
 <summary>
 Change directory module.
 </summary>
</member>
<member name="F:mhsh.interpreter.path@">
 <summary>
 Path of MochaDB Shell Script file.
 </summary>
</member>
<member name="M:mhsh.interpreter.showHelp">
 <summary>
 Show help.
 </summary>
</member>
<member name="P:mhsh.interpreter.path(System.String)">
 <summary>
 Path of MochaDB Shell Script file.
 </summary>
</member>
<member name="M:mhsh.interpreter.processCommand(System.String,System.String)">
 <summary>
 Process command and do task.
 </summary>
 <param name="ns">Name of modules(namespace).</param>
 <param name="cmd">Commands(without module name).</param>
</member>
<member name="M:mhsh.interpreter.interpret">
 <summary>
 Interpret script codes.
 </summary>
</member>
<member name="M:mhsh.interpreter.internalProcessCommand(System.String,System.String)">
 <summary>
 Process command in special interpreter commands.
 </summary>
 <param name="ns">Name of modules(namespace).</param>
 <param name="cmd">Commands(without module name).</param>
 <returns>true if namespace is internal command, false if not.</returns>
</member>
<member name="P:mhsh.interpreter.path">
 <summary>
 Path of MochaDB Shell Script file.
 </summary>
</member>
<member name="T:mhsh.interpreter">
 <summary>
 Interpreter for mhsh(MochaDB Shell Script).
 </summary>
</member>
<member name="F:mhsh.objects._WORKFLOW_.works@">
 <summary>
 Works of workflow.
 </summary>
</member>
<member name="P:mhsh.objects._WORKFLOW_.works(System.Collections.Generic.List{System.String})">
 <summary>
 Works of workflow.
 </summary>
</member>
<member name="P:mhsh.objects._WORKFLOW_.works">
 <summary>
 Works of workflow.
 </summary>
</member>
<member name="T:mhsh.objects._WORKFLOW_">
 <summary>
 Workflow instance.
 </summary>
</member>
<member name="F:mhsh.objects._WORK_.literals@">
 <summary>
 Commands of work.
 </summary>
</member>
<member name="F:mhsh.objects._WORK_.parameters@">
 <summary>
 Parameters of work.
 </summary>
</member>
<member name="F:mhsh.objects._WORK_.name@">
 <summary>
 Name of work.
 </summary>
</member>
<member name="P:mhsh.objects._WORK_.parameters(System.Collections.Generic.List{System.String})">
 <summary>
 Parameters of work.
 </summary>
</member>
<member name="P:mhsh.objects._WORK_.name(System.String)">
 <summary>
 Name of work.
 </summary>
</member>
<member name="P:mhsh.objects._WORK_.literals(System.Collections.Generic.List{System.String})">
 <summary>
 Commands of work.
 </summary>
</member>
<member name="P:mhsh.objects._WORK_.parameters">
 <summary>
 Parameters of work.
 </summary>
</member>
<member name="P:mhsh.objects._WORK_.name">
 <summary>
 Name of work.
 </summary>
</member>
<member name="P:mhsh.objects._WORK_.literals">
 <summary>
 Commands of work.
 </summary>
</member>
<member name="T:mhsh.objects._WORK_">
 <summary>
 Work instance.
 </summary>
</member>
<member name="F:mhsh.objects._LITERAL_.line@">
 <summary>
 Lines count of literal.
 </summary>
</member>
<member name="F:mhsh.objects._LITERAL_.value@">
 <summary>
 Value of literal.
 </summary>
</member>
<member name="P:mhsh.objects._LITERAL_.value(System.String)">
 <summary>
 Value of literal.
 </summary>
</member>
<member name="P:mhsh.objects._LITERAL_.line(System.Int32)">
 <summary>
 Lines count of literal.
 </summary>
</member>
<member name="P:mhsh.objects._LITERAL_.value">
 <summary>
 Value of literal.
 </summary>
</member>
<member name="P:mhsh.objects._LITERAL_.line">
 <summary>
 Lines count of literal.
 </summary>
</member>
<member name="T:mhsh.objects._LITERAL_">
 <summary>
 A literal instance.
 </summary>
</member>
<member name="F:mhsh.objects._VARIABLE_.value@">
 <summary>
 Value of variable.
 </summary>
</member>
<member name="F:mhsh.objects._VARIABLE_.name@">
 <summary>
 Name of variable.
 </summary>
</member>
<member name="P:mhsh.objects._VARIABLE_.value(System.String)">
 <summary>
 Value of variable.
 </summary>
</member>
<member name="P:mhsh.objects._VARIABLE_.name(System.String)">
 <summary>
 Name of variable.
 </summary>
</member>
<member name="P:mhsh.objects._VARIABLE_.value">
 <summary>
 Value of variable.
 </summary>
</member>
<member name="P:mhsh.objects._VARIABLE_.name">
 <summary>
 Name of variable.
 </summary>
</member>
<member name="T:mhsh.objects._VARIABLE_">
 <summary>
 A variable instance.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.workDefine@">
 <summary>
 Work define keyword.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.workflowDefine@">
 <summary>
 Workflow define keyword.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.DOLLAREQUAL@">
 <summary>
 Dollar equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.DOLLAR@">
 <summary>
 Dollar mark.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.COLONEQUAL@">
 <summary>
 Colon equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.ELLIPSIS@">
 <summary>
 Ellipsis.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.RARROW@">
 <summary>
 Right arrow.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.LARROW@">
 <summary>
 Left arrow.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.ATEQUAL@">
 <summary>
 At equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.AT@">
 <summary>
 At.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.DOUBLESLASHEQUAL@">
 <summary>
 Double slahs equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.DOUBLESTAREQUAL@">
 <summary>
 Double start equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.RIGHTSHIFTEQUAL@">
 <summary>
 Right shift equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.LEFTSHIFTEQUAL@">
 <summary>
 Left shift equal
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.CIRCUMFLEXEQUAL@">
 <summary>
 Circumflex equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.VBAREQUAL@">
 <summary>
 Vertical Bar equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.AMPEREQUAL@">
 <summary>
 Amper equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.PERCENTEQUAL@">
 <summary>
 Percent equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.SLASHEQUAL@">
 <summary>
 Slash equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.MINEQUAL@">
 <summary>
 Minus equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.PLUSEQUAL@">
 <summary>
 Plus equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.DOUBLESTAR@">
 <summary>
 Double star.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.RIGHTSHIFT@">
 <summary>
 Right shift.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.LEFTSHIFT@">
 <summary>
 Left shift.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.CIRCUMFLEX@">
 <summary>
 Circumflex.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.TILDE@">
 <summary>
 Tilde.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.GREATEREQUAL@">
 <summary>
 Greater or equals.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.LESSEQUAL@">
 <summary>
 Less or equals.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.NOTEQUAL@">
 <summary>
 Not equals to.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.EQEQUAL@">
 <summary>
 Equals to.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.RBRACE@">
 <summary>
 Right bracket.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.LBRACE@">
 <summary>
 Left bracket.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.PERCENT@">
 <summary>
 Percent.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.DOT@">
 <summary>
 Dot.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.EQUAL@">
 <summary>
 Equal.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.GREATER@">
 <summary>
 Greater than.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.LESS@">
 <summary>
 Less than.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.AMPER@">
 <summary>
 Amper.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.VBAR@">
 <summary>
 Vertical Bar.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.SLASH@">
 <summary>
 Slash.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.STAR@">
 <summary>
 Start.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.MINUS@">
 <summary>
 Minus.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.PLUS@">
 <summary>
 Plus.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.SEMICOLON@">
 <summary>
 Semicolon.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.COMMA@">
 <summary>
 Comma.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.COLON@">
 <summary>
 Colon.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.RPAR@">
 <summary>
 Right parantheses.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.LPAR@">
 <summary>
 Left parentheses.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.ESCAPESEQUENCE@">
 <summary>
 Escape sequence character of values.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.INLINECOMMENT@">
 <summary>
 Inline comment.
 </summary>
</member>
<member name="F:mhsh.parser._TOKENS_.FAILED@">
 <summary>
 Fail state of interpretting.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.FAILED(System.Boolean)">
 <summary>
 Fail state of interpretting.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.workflowDefine">
 <summary>
 Workflow define keyword.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.workDefine">
 <summary>
 Work define keyword.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.VBAREQUAL">
 <summary>
 Vertical Bar equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.VBAR">
 <summary>
 Vertical Bar.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.TILDE">
 <summary>
 Tilde.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.STAR">
 <summary>
 Start.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.SLASHEQUAL">
 <summary>
 Slash equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.SLASH">
 <summary>
 Slash.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.SEMICOLON">
 <summary>
 Semicolon.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.RPAR">
 <summary>
 Right parantheses.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.RIGHTSHIFTEQUAL">
 <summary>
 Right shift equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.RIGHTSHIFT">
 <summary>
 Right shift.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.RBRACE">
 <summary>
 Right bracket.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.RARROW">
 <summary>
 Right arrow.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.PLUSEQUAL">
 <summary>
 Plus equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.PLUS">
 <summary>
 Plus.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.PERCENTEQUAL">
 <summary>
 Percent equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.PERCENT">
 <summary>
 Percent.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.NOTEQUAL">
 <summary>
 Not equals to.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.MINUS">
 <summary>
 Minus.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.MINEQUAL">
 <summary>
 Minus equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.LPAR">
 <summary>
 Left parentheses.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.LESSEQUAL">
 <summary>
 Less or equals.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.LESS">
 <summary>
 Less than.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.LEFTSHIFTEQUAL">
 <summary>
 Left shift equal
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.LEFTSHIFT">
 <summary>
 Left shift.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.LBRACE">
 <summary>
 Left bracket.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.LARROW">
 <summary>
 Left arrow.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.INLINECOMMENT">
 <summary>
 Inline comment.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.GREATEREQUAL">
 <summary>
 Greater or equals.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.GREATER">
 <summary>
 Greater than.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.FAILED">
 <summary>
 Fail state of interpretting.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.ESCAPESEQUENCE">
 <summary>
 Escape sequence character of values.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.EQUAL">
 <summary>
 Equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.EQEQUAL">
 <summary>
 Equals to.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.ELLIPSIS">
 <summary>
 Ellipsis.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.DOUBLESTAREQUAL">
 <summary>
 Double start equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.DOUBLESTAR">
 <summary>
 Double star.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.DOUBLESLASHEQUAL">
 <summary>
 Double slahs equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.DOT">
 <summary>
 Dot.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.DOLLAREQUAL">
 <summary>
 Dollar equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.DOLLAR">
 <summary>
 Dollar mark.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.COMMA">
 <summary>
 Comma.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.COLONEQUAL">
 <summary>
 Colon equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.COLON">
 <summary>
 Colon.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.CIRCUMFLEXEQUAL">
 <summary>
 Circumflex equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.CIRCUMFLEX">
 <summary>
 Circumflex.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.ATEQUAL">
 <summary>
 At equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.AT">
 <summary>
 At.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.AMPEREQUAL">
 <summary>
 Amper equal.
 </summary>
</member>
<member name="P:mhsh.parser._TOKENS_.AMPER">
 <summary>
 Amper.
 </summary>
</member>
<member name="T:mhsh.parser._TOKENS_">
 <summary>
 Tokens.
 </summary>
</member>
<member name="F:mhsh.parser._LEXER_.failProcess@">
 <summary>
 Failed process state.
 </summary>
</member>
<member name="M:mhsh.parser._LEXER_.skipWork(Microsoft.FSharp.Core.FSharpRef{System.Int32},Microsoft.FSharp.Core.FSharpRef{System.String[]},Microsoft.FSharp.Core.FSharpRef{System.Collections.Generic.List{mhsh.objects._VARIABLE_}})">
 <summary>
 Skip work with processing.
 </summary>
 <param name="index">Last index of lines.</param>
 <param name="lines">Lines.</param>
 <param name="variables">Variables.</param>
 <returns>Work instance of skipped work.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.removeComments(System.String)">
 <summary>
 Remove comments from statement.
 </summary>
 <param name="statement">Statement.</param>
 <returns>Statement without comments.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.processWorkflow(Microsoft.FSharp.Core.FSharpRef{System.Int32},Microsoft.FSharp.Core.FSharpRef{System.String[]},Microsoft.FSharp.Core.FSharpRef{System.Collections.Generic.List{mhsh.objects._VARIABLE_}})">
 <summary>
 Process workflow.
 </summary>
 <param name="index">Last index of lines.</param>
 <param name="lines">Lines.</param>
 <param name="variables">Variables.</param>
 <returns>true if success, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.processWork(System.String,Microsoft.FSharp.Core.FSharpRef{System.Int32},Microsoft.FSharp.Core.FSharpRef{System.String[]},Microsoft.FSharp.Core.FSharpRef{System.Collections.Generic.List{mhsh.objects._VARIABLE_}})">
 <summary>
 Process work.
 </summary>
 <param name="name">Name of work.</param>
 <param name="index">Last index of lines.</param>
 <param name="lines">Lines.</param>
 <param name="variables">Variables.</param>
 <returns>true if success, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.processVariable(Microsoft.FSharp.Core.FSharpRef{System.Int32},Microsoft.FSharp.Core.FSharpRef{System.String[]},Microsoft.FSharp.Core.FSharpRef{System.Collections.Generic.List{mhsh.objects._VARIABLE_}})">
 <summary>
 Process variable.
 </summary>
 <param name="index">Last index of lines.</param>
 <param name="lines">Lines.</param>
 <param name="variables">Variables.</param>
 <returns>true if success, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.processValue(Microsoft.FSharp.Core.FSharpRef{System.Collections.Generic.List{mhsh.objects._VARIABLE_}},System.String)">
 <summary>
 Process value statement.
 </summary>
 <param name="variables">Variables.</param>
 <param name="value">Value to process.</param>
 <returns>Value.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.processSequence(System.String)">
 <summary>
 Process escape sequence.
 </summary>
 <param name="value">Statement.</param>
 <returns>Value of escape sequence.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.lexVariable(Microsoft.FSharp.Core.FSharpRef{System.Int32},Microsoft.FSharp.Core.FSharpRef{System.String[]})">
 <summary>
 Lex variable.
 </summary>
 <param name="index">Last index of lines.</param>
 <param name="lines">Lines.</param>
 <returns>Parts of variable.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.lexParameters(System.String)">
 <summary>
 Lex parameters.
 </summary>
 <param name="statement">Statement.</param>
 <returns>Parameters.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.lexBraceRange(System.Char,System.Char,System.String)">
 <summary>
 Decompose range.
 </summary>
 <param name="openc">Open char.</param>
 <param name="closec">Close char.</param>
 <param name="statement">Statement.</param>
 <returns>Statement without range.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.isWorkflowStatement(System.String)">
 <summary>
 Check statement is workflow statement.
 </summary>
 <param name="statement">Statement.</param>
 <returns>true if statement is workflow, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.isWorkStatement(System.String)">
 <summary>
 Check statement is work statement.
 </summary>
 <param name="statement">Statement.</param>
 <returns>true if statement is work, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.isVariableStatement(System.String)">
 <summary>
 Check statement is variable statement.
 </summary>
 <param name="statement">Statement.</param>
 <returns>true if statement is variable, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.isValidVariableName(System.String)">
 <summary>
 Check name is valid or not.
 </summary>
 <param name="name">Name to check.</param>
 <returns>true is valid, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.isSkippableStatement(System.String)">
 <summary>
 Check statement is skippable statement.
 </summary>
 <param name="statement">Statement.</param>
 <returns>true if statement is skippable, false if not.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.isLiteralStatement(System.String)">
 <summary>
 Check statement is literal statement.
 </summary>
 <param name="statement">Statement.</param>
 <returns>true if statement is literal, false if not.</returns>
</member>
<member name="P:mhsh.parser._LEXER_.failProcess">
 <summary>
 Failed process state.
 </summary>
</member>
<member name="M:mhsh.parser._LEXER_.getWorkName(System.String,System.Boolean)">
 <summary>
 Decompose work name.
 </summary>
 <param name="statement">Statement.</param>
 <param name="removeParameters">Remove parameters.</param>
 <returns>Name of work.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.getVariableNameFromStatement(System.String)">
 <summary>
 Decompose variable name.
 </summary>
 <param name="statement">Statement.</param>
 <returns>Name of variable.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.getLiteral(Microsoft.FSharp.Core.FSharpRef{System.Int32},Microsoft.FSharp.Core.FSharpRef{System.String[]},Microsoft.FSharp.Core.FSharpRef{System.Collections.Generic.List{mhsh.objects._VARIABLE_}})">
 <summary>
 Decompose literal.
 </summary>
 <param name="index">Index.</param>
 <param name="lines">Lines.</param>
 <param name="variables">Variables.</param>
 <returns>Literal.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.findWork(System.String,Microsoft.FSharp.Core.FSharpRef{System.Int32},Microsoft.FSharp.Core.FSharpRef{System.String[]})">
 <summary>
 Find work index.
 </summary>
 <param name="name">Name of work.</param>
 <param name="index">Last index of lines.</param>
 <param name="lines">Lines.</param>
 <returns>Index of line.</returns>
</member>
<member name="M:mhsh.parser._LEXER_.findVariableLimit(System.String)">
 <summary>
 Find limit of variable statement.
 </summary>
 <param name="statement">Statement.</param>
 <returns>Index of limit if found, negative one if not.</returns>
</member>
<member name="T:mhsh.parser._LEXER_">
 <summary>
 Lexer.
 </summary>
</member>
<member name="M:Program.main(System.String[])">
 <summary>
 Entry point of terminal.
 </summary>
 <param name="argv">Arguments.</param>
 <returns>Exit code.</returns>
</member>
</members>
</doc>
